
motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003240  08003240  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003248  08003248  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf46  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191d  00000000  00000000  0002cf82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  0002e8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af8  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228b2  00000000  00000000  0002ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfc8  00000000  00000000  000527da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ab2  00000000  00000000  0005f7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00135254  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b4  00000000  00000000  001352a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003210 	.word	0x08003210

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003210 	.word	0x08003210

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fc65 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f83f 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f9b3 	bl	800085c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004f6:	f000 f89b 	bl	8000630 <MX_TIM1_Init>
  MX_UART4_Init();
 80004fa:	f000 f953 	bl	80007a4 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	4818      	ldr	r0, [pc, #96]	; (8000564 <main+0x80>)
 8000504:	f000 ff5c 	bl	80013c0 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start(&htim1);
  TIM1->CCR1 = 15000;
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <main+0x84>)
 800050a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 15000;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <main+0x84>)
 8000512:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 15000;
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <main+0x84>)
 800051a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800051e:	63da      	str	r2, [r3, #60]	; 0x3c
  uint8_t state = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052a:	4810      	ldr	r0, [pc, #64]	; (800056c <main+0x88>)
 800052c:	f000 ff48 	bl	80013c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <main+0x88>)
 8000538:	f000 ff42 	bl	80013c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <main+0x88>)
 8000544:	f000 ff3c 	bl	80013c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <main+0x88>)
 8000550:	f000 ff36 	bl	80013c0 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */
	  //state = GPIOC -> IDR & 7;
	  //char ch = state + 0x30;
	  //HAL_UART_Transmit(&huart4,(uint8_t *)&ch, 1, 0xFFFF);
	  //HAL_Delay(100);
	  state = motor_drive(state);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f9f6 	bl	8000948 <motor_drive>
 800055c:	4603      	mov	r3, r0
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	e7f8      	b.n	8000554 <main+0x70>
 8000562:	bf00      	nop
 8000564:	40020800 	.word	0x40020800
 8000568:	40010000 	.word	0x40010000
 800056c:	40020400 	.word	0x40020400

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fe3e 	bl	8003200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xb8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <SystemClock_Config+0xb8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <SystemClock_Config+0xb8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <SystemClock_Config+0xbc>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <SystemClock_Config+0xbc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff05 	bl	80013f4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f0:	f000 f9a4 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f968 	bl	80018e4 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061a:	f000 f98f 	bl	800093c <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2220      	movs	r2, #32
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fdc9 	bl	8003200 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800066e:	4b4b      	ldr	r3, [pc, #300]	; (800079c <MX_TIM1_Init+0x16c>)
 8000670:	4a4b      	ldr	r2, [pc, #300]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000672:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000674:	4b49      	ldr	r3, [pc, #292]	; (800079c <MX_TIM1_Init+0x16c>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b48      	ldr	r3, [pc, #288]	; (800079c <MX_TIM1_Init+0x16c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8000680:	4b46      	ldr	r3, [pc, #280]	; (800079c <MX_TIM1_Init+0x16c>)
 8000682:	f247 5230 	movw	r2, #30000	; 0x7530
 8000686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000688:	4b44      	ldr	r3, [pc, #272]	; (800079c <MX_TIM1_Init+0x16c>)
 800068a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000690:	4b42      	ldr	r3, [pc, #264]	; (800079c <MX_TIM1_Init+0x16c>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000696:	4b41      	ldr	r3, [pc, #260]	; (800079c <MX_TIM1_Init+0x16c>)
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800069c:	483f      	ldr	r0, [pc, #252]	; (800079c <MX_TIM1_Init+0x16c>)
 800069e:	f001 faf1 	bl	8001c84 <HAL_TIM_Base_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f948 	bl	800093c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006b6:	4619      	mov	r1, r3
 80006b8:	4838      	ldr	r0, [pc, #224]	; (800079c <MX_TIM1_Init+0x16c>)
 80006ba:	f001 fd85 	bl	80021c8 <HAL_TIM_ConfigClockSource>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006c4:	f000 f93a 	bl	800093c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006c8:	4834      	ldr	r0, [pc, #208]	; (800079c <MX_TIM1_Init+0x16c>)
 80006ca:	f001 fb2a 	bl	8001d22 <HAL_TIM_PWM_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006d4:	f000 f932 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006e4:	4619      	mov	r1, r3
 80006e6:	482d      	ldr	r0, [pc, #180]	; (800079c <MX_TIM1_Init+0x16c>)
 80006e8:	f002 fa5e 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80006f2:	f000 f923 	bl	800093c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f6:	2360      	movs	r3, #96	; 0x60
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fe:	2300      	movs	r3, #0
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000702:	2300      	movs	r3, #0
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	4820      	ldr	r0, [pc, #128]	; (800079c <MX_TIM1_Init+0x16c>)
 800071c:	f001 fc92 	bl	8002044 <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000726:	f000 f909 	bl	800093c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072e:	2204      	movs	r2, #4
 8000730:	4619      	mov	r1, r3
 8000732:	481a      	ldr	r0, [pc, #104]	; (800079c <MX_TIM1_Init+0x16c>)
 8000734:	f001 fc86 	bl	8002044 <HAL_TIM_PWM_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800073e:	f000 f8fd 	bl	800093c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	2208      	movs	r2, #8
 8000748:	4619      	mov	r1, r3
 800074a:	4814      	ldr	r0, [pc, #80]	; (800079c <MX_TIM1_Init+0x16c>)
 800074c:	f001 fc7a 	bl	8002044 <HAL_TIM_PWM_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000756:	f000 f8f1 	bl	800093c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <MX_TIM1_Init+0x16c>)
 800077e:	f002 fa8f 	bl	8002ca0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000788:	f000 f8d8 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <MX_TIM1_Init+0x16c>)
 800078e:	f000 f9eb 	bl	8000b68 <HAL_TIM_MspPostInit>

}
 8000792:	bf00      	nop
 8000794:	3758      	adds	r7, #88	; 0x58
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000028 	.word	0x20000028
 80007a0:	40010000 	.word	0x40010000

080007a4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */
	__HAL_RCC_GPIOA_CLK_ENABLE(); /* Enable clock to PORTA - UART2 pins PA2 and PA3 */
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_UART4_Init+0xa8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a26      	ldr	r2, [pc, #152]	; (800084c <MX_UART4_Init+0xa8>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_UART4_Init+0xa8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_UART4_CLK_ENABLE(); /* Enable clock to UART2 module */
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_UART4_Init+0xa8>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a1f      	ldr	r2, [pc, #124]	; (800084c <MX_UART4_Init+0xa8>)
 80007d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_UART4_Init+0xa8>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef UART4_GPIO_Handler; /*Create GPIO_InitTypeDef struct instance */
	UART4_GPIO_Handler.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60fb      	str	r3, [r7, #12]
	UART4_GPIO_Handler.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	613b      	str	r3, [r7, #16]
	UART4_GPIO_Handler.Pull = GPIO_PULLUP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
	UART4_GPIO_Handler.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61bb      	str	r3, [r7, #24]
	UART4_GPIO_Handler.Alternate = GPIO_AF8_UART4;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &UART4_GPIO_Handler);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_UART4_Init+0xac>)
 80007fe:	f000 fc33 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_UART4_Init+0xb0>)
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <MX_UART4_Init+0xb4>)
 8000806:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_UART4_Init+0xb0>)
 800080a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_UART4_Init+0xb0>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_UART4_Init+0xb0>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_UART4_Init+0xb0>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_UART4_Init+0xb0>)
 8000824:	220c      	movs	r2, #12
 8000826:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_UART4_Init+0xb0>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_UART4_Init+0xb0>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000834:	4807      	ldr	r0, [pc, #28]	; (8000854 <MX_UART4_Init+0xb0>)
 8000836:	f002 faaa 	bl	8002d8e <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_UART4_Init+0xa0>
  {
    Error_Handler();
 8000840:	f000 f87c 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	200000b4 	.word	0x200000b4
 8000858:	40004c00 	.word	0x40004c00

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a2d      	ldr	r2, [pc, #180]	; (8000930 <MX_GPIO_Init+0xd4>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a26      	ldr	r2, [pc, #152]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_GPIO_Init+0xd8>)
 80008ea:	f000 fd69 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80008ee:	2307      	movs	r3, #7
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0xdc>)
 8000906:	f000 fbaf 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800090a:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0xd8>)
 8000924:	f000 fba0 	bl	8001068 <HAL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400
 8000938:	40020800 	.word	0x40020800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <motor_drive>:
#include "main.h"
#include "motor.h"
TIM_HandleTypeDef htim1;
uint8_t motor_drive(uint8_t ex_state){
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]

	uint8_t state;

	state = (GPIOC->IDR) & 7;
 8000952:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <motor_drive+0x184>)
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0307 	and.w	r3, r3, #7
 800095c:	73fb      	strb	r3, [r7, #15]
	// TIM1 CH 1N PWM 2 // PA7
	// TIM1 CH 2  PWM 3 // PE11
	// TIM1 CH 2N PWM 4 // PB0
	// TIM1 CH 3  PWM 5 // PE13
	// TIM1 CH 3N PWM 6 // PB1
	if(state != ex_state){
 800095e:	7bfa      	ldrb	r2, [r7, #15]
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	429a      	cmp	r2, r3
 8000964:	f000 80aa 	beq.w	8000abc <motor_drive+0x174>

		switch(state){
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	3b01      	subs	r3, #1
 800096c:	2b05      	cmp	r3, #5
 800096e:	f200 80a7 	bhi.w	8000ac0 <motor_drive+0x178>
 8000972:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <motor_drive+0x30>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	08000991 	.word	0x08000991
 800097c:	08000a59 	.word	0x08000a59
 8000980:	08000a8b 	.word	0x08000a8b
 8000984:	080009f5 	.word	0x080009f5
 8000988:	080009c3 	.word	0x080009c3
 800098c:	08000a27 	.word	0x08000a27

			case 1:
				//PWM 1 VE PWM 6 AÇILCAK GERİSİ KAPALI
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PWM1
 8000990:	2100      	movs	r1, #0
 8000992:	484f      	ldr	r0, [pc, #316]	; (8000ad0 <motor_drive+0x188>)
 8000994:	f001 fa1e 	bl	8001dd4 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); // PWM2
 8000998:	2100      	movs	r1, #0
 800099a:	484d      	ldr	r0, [pc, #308]	; (8000ad0 <motor_drive+0x188>)
 800099c:	f002 f8a6 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // PWM3
 80009a0:	2104      	movs	r1, #4
 80009a2:	484b      	ldr	r0, [pc, #300]	; (8000ad0 <motor_drive+0x188>)
 80009a4:	f001 fade 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); // PWM4
 80009a8:	2104      	movs	r1, #4
 80009aa:	4849      	ldr	r0, [pc, #292]	; (8000ad0 <motor_drive+0x188>)
 80009ac:	f002 f89e 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //PWM5
 80009b0:	2108      	movs	r1, #8
 80009b2:	4847      	ldr	r0, [pc, #284]	; (8000ad0 <motor_drive+0x188>)
 80009b4:	f001 fad6 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); //PWM6
 80009b8:	2108      	movs	r1, #8
 80009ba:	4845      	ldr	r0, [pc, #276]	; (8000ad0 <motor_drive+0x188>)
 80009bc:	f001 ffdc 	bl	8002978 <HAL_TIMEx_PWMN_Start>
				break;
 80009c0:	e07f      	b.n	8000ac2 <motor_drive+0x17a>
			case 5:
				//PWM 1 VE PWM 4 AÇILCAK GERİSİ KAPALI
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PWM1
 80009c2:	2100      	movs	r1, #0
 80009c4:	4842      	ldr	r0, [pc, #264]	; (8000ad0 <motor_drive+0x188>)
 80009c6:	f001 fa05 	bl	8001dd4 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); // PWM2
 80009ca:	2100      	movs	r1, #0
 80009cc:	4840      	ldr	r0, [pc, #256]	; (8000ad0 <motor_drive+0x188>)
 80009ce:	f002 f88d 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // PWM3
 80009d2:	2104      	movs	r1, #4
 80009d4:	483e      	ldr	r0, [pc, #248]	; (8000ad0 <motor_drive+0x188>)
 80009d6:	f001 fac5 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // PWM4
 80009da:	2104      	movs	r1, #4
 80009dc:	483c      	ldr	r0, [pc, #240]	; (8000ad0 <motor_drive+0x188>)
 80009de:	f001 ffcb 	bl	8002978 <HAL_TIMEx_PWMN_Start>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //PWM5
 80009e2:	2108      	movs	r1, #8
 80009e4:	483a      	ldr	r0, [pc, #232]	; (8000ad0 <motor_drive+0x188>)
 80009e6:	f001 fabd 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //PWM6
 80009ea:	2108      	movs	r1, #8
 80009ec:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <motor_drive+0x188>)
 80009ee:	f002 f87d 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				break;
 80009f2:	e066      	b.n	8000ac2 <motor_drive+0x17a>
			case 4:
				//PWM 4 VE PWM 5 AÇILCAK GERİSİ KAPALI
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // PWM1
 80009f4:	2100      	movs	r1, #0
 80009f6:	4836      	ldr	r0, [pc, #216]	; (8000ad0 <motor_drive+0x188>)
 80009f8:	f001 fab4 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // PWM2
 80009fc:	2100      	movs	r1, #0
 80009fe:	4834      	ldr	r0, [pc, #208]	; (8000ad0 <motor_drive+0x188>)
 8000a00:	f001 ffba 	bl	8002978 <HAL_TIMEx_PWMN_Start>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // PWM3
 8000a04:	2104      	movs	r1, #4
 8000a06:	4832      	ldr	r0, [pc, #200]	; (8000ad0 <motor_drive+0x188>)
 8000a08:	f001 faac 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // PWM4
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	4830      	ldr	r0, [pc, #192]	; (8000ad0 <motor_drive+0x188>)
 8000a10:	f001 ffb2 	bl	8002978 <HAL_TIMEx_PWMN_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //PWM5
 8000a14:	2108      	movs	r1, #8
 8000a16:	482e      	ldr	r0, [pc, #184]	; (8000ad0 <motor_drive+0x188>)
 8000a18:	f001 f9dc 	bl	8001dd4 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //PWM6
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	482c      	ldr	r0, [pc, #176]	; (8000ad0 <motor_drive+0x188>)
 8000a20:	f002 f864 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				break;
 8000a24:	e04d      	b.n	8000ac2 <motor_drive+0x17a>
			case 6:
				//PWM 2 VE PWM 5 AÇILCAK GERİSİ KAPALI
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // PWM1
 8000a26:	2100      	movs	r1, #0
 8000a28:	4829      	ldr	r0, [pc, #164]	; (8000ad0 <motor_drive+0x188>)
 8000a2a:	f001 fa9b 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // PWM2
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4827      	ldr	r0, [pc, #156]	; (8000ad0 <motor_drive+0x188>)
 8000a32:	f001 ffa1 	bl	8002978 <HAL_TIMEx_PWMN_Start>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // PWM3
 8000a36:	2104      	movs	r1, #4
 8000a38:	4825      	ldr	r0, [pc, #148]	; (8000ad0 <motor_drive+0x188>)
 8000a3a:	f001 fa93 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); // PWM4
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <motor_drive+0x188>)
 8000a42:	f002 f853 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //PWM5
 8000a46:	2108      	movs	r1, #8
 8000a48:	4821      	ldr	r0, [pc, #132]	; (8000ad0 <motor_drive+0x188>)
 8000a4a:	f001 f9c3 	bl	8001dd4 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //PWM6
 8000a4e:	2108      	movs	r1, #8
 8000a50:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <motor_drive+0x188>)
 8000a52:	f002 f84b 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				break;
 8000a56:	e034      	b.n	8000ac2 <motor_drive+0x17a>
			case 2:
				//PWM 2 VE PWM 3 AÇILCAK GERİSİ KAPALI
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // PWM1
 8000a58:	2100      	movs	r1, #0
 8000a5a:	481d      	ldr	r0, [pc, #116]	; (8000ad0 <motor_drive+0x188>)
 8000a5c:	f001 fa82 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // PWM2
 8000a60:	2100      	movs	r1, #0
 8000a62:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <motor_drive+0x188>)
 8000a64:	f001 ff88 	bl	8002978 <HAL_TIMEx_PWMN_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // PWM3
 8000a68:	2104      	movs	r1, #4
 8000a6a:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <motor_drive+0x188>)
 8000a6c:	f001 f9b2 	bl	8001dd4 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); // PWM4
 8000a70:	2104      	movs	r1, #4
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <motor_drive+0x188>)
 8000a74:	f002 f83a 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //PWM5
 8000a78:	2108      	movs	r1, #8
 8000a7a:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <motor_drive+0x188>)
 8000a7c:	f001 fa72 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //PWM6
 8000a80:	2108      	movs	r1, #8
 8000a82:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <motor_drive+0x188>)
 8000a84:	f002 f832 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				break;
 8000a88:	e01b      	b.n	8000ac2 <motor_drive+0x17a>
			case 3:
				//PWM 3 VE PWM 6 AÇILCAK GERİSİ KAPALI
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // PWM1
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <motor_drive+0x188>)
 8000a8e:	f001 fa69 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); // PWM2
 8000a92:	2100      	movs	r1, #0
 8000a94:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <motor_drive+0x188>)
 8000a96:	f002 f829 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // PWM3
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <motor_drive+0x188>)
 8000a9e:	f001 f999 	bl	8001dd4 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); // PWM4
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <motor_drive+0x188>)
 8000aa6:	f002 f821 	bl	8002aec <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //PWM5
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <motor_drive+0x188>)
 8000aae:	f001 fa59 	bl	8001f64 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); //PWM6
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <motor_drive+0x188>)
 8000ab6:	f001 ff5f 	bl	8002978 <HAL_TIMEx_PWMN_Start>
				break;
 8000aba:	e002      	b.n	8000ac2 <motor_drive+0x17a>
			default:
				break;
				}

	}
 8000abc:	bf00      	nop
 8000abe:	e000      	b.n	8000ac2 <motor_drive+0x17a>
				break;
 8000ac0:	bf00      	nop
		return state;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]

	}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	20000028 	.word	0x20000028

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_TIM_Base_MspInit+0x3c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10d      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_TIM_Base_MspInit+0x40>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <HAL_TIM_Base_MspInit+0x40>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_TIM_Base_MspInit+0x40>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40010000 	.word	0x40010000
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <HAL_TIM_MspPostInit+0xe0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d15a      	bne.n	8000c40 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a2e      	ldr	r2, [pc, #184]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_TIM_MspPostInit+0xe4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM1_CH3N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4815      	ldr	r0, [pc, #84]	; (8000c50 <HAL_TIM_MspPostInit+0xe8>)
 8000bfa:	f000 fa35 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <HAL_TIM_MspPostInit+0xec>)
 8000c1a:	f000 fa25 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000c1e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <HAL_TIM_MspPostInit+0xf0>)
 8000c3c:	f000 fa14 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_UART_MspInit+0x8c>)
 8000cd2:	f000 f9c9 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004c00 	.word	0x40004c00
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f890 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6a:	490e      	ldr	r1, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d80:	4c0b      	ldr	r4, [pc, #44]	; (8000db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff ffd7 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f002 fa11 	bl	80031b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fba5 	bl	80004e4 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000da8:	08003250 	.word	0x08003250
  ldr r2, =_sbss
 8000dac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db0:	200000fc 	.word	0x200000fc

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f90d 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe72 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f917 	bl	800104e <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f8ed 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200000f8 	.word	0x200000f8

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200000f8 	.word	0x200000f8

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff47 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5c 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff8e 	bl	8000f54 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb0 	bl	8000fbc <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e177      	b.n	8001374 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8166 	bne.w	800136e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80c0 	beq.w	800136e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b66      	ldr	r3, [pc, #408]	; (800138c <HAL_GPIO_Init+0x324>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <HAL_GPIO_Init+0x324>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <HAL_GPIO_Init+0x324>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a61      	ldr	r2, [pc, #388]	; (8001390 <HAL_GPIO_Init+0x328>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a58      	ldr	r2, [pc, #352]	; (8001394 <HAL_GPIO_Init+0x32c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d037      	beq.n	80012a6 <HAL_GPIO_Init+0x23e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a57      	ldr	r2, [pc, #348]	; (8001398 <HAL_GPIO_Init+0x330>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d031      	beq.n	80012a2 <HAL_GPIO_Init+0x23a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a56      	ldr	r2, [pc, #344]	; (800139c <HAL_GPIO_Init+0x334>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_Init+0x236>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a55      	ldr	r2, [pc, #340]	; (80013a0 <HAL_GPIO_Init+0x338>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x232>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a54      	ldr	r2, [pc, #336]	; (80013a4 <HAL_GPIO_Init+0x33c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x22e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a53      	ldr	r2, [pc, #332]	; (80013a8 <HAL_GPIO_Init+0x340>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x22a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_GPIO_Init+0x344>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x226>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <HAL_GPIO_Init+0x348>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x222>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_GPIO_Init+0x34c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x21e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x350>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x21a>
 800127e:	2309      	movs	r3, #9
 8001280:	e012      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 8001282:	230a      	movs	r3, #10
 8001284:	e010      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 8001286:	2308      	movs	r3, #8
 8001288:	e00e      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 800128a:	2307      	movs	r3, #7
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 800128e:	2306      	movs	r3, #6
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x328>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <HAL_GPIO_Init+0x354>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ea:	4a34      	ldr	r2, [pc, #208]	; (80013bc <HAL_GPIO_Init+0x354>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f0:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_GPIO_Init+0x354>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001314:	4a29      	ldr	r2, [pc, #164]	; (80013bc <HAL_GPIO_Init+0x354>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_GPIO_Init+0x354>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <HAL_GPIO_Init+0x354>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_GPIO_Init+0x354>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_GPIO_Init+0x354>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f ae84 	bls.w	8001084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40021400 	.word	0x40021400
 80013ac:	40021800 	.word	0x40021800
 80013b0:	40021c00 	.word	0x40021c00
 80013b4:	40022000 	.word	0x40022000
 80013b8:	40022400 	.word	0x40022400
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e264      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d075      	beq.n	80014fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001412:	4ba3      	ldr	r3, [pc, #652]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b04      	cmp	r3, #4
 800141c:	d00c      	beq.n	8001438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141e:	4ba0      	ldr	r3, [pc, #640]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001426:	2b08      	cmp	r3, #8
 8001428:	d112      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142a:	4b9d      	ldr	r3, [pc, #628]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001436:	d10b      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d05b      	beq.n	80014fc <HAL_RCC_OscConfig+0x108>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d157      	bne.n	80014fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e23f      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x74>
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a90      	ldr	r2, [pc, #576]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x98>
 8001472:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a8a      	ldr	r2, [pc, #552]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a87      	ldr	r2, [pc, #540]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 800148c:	4b84      	ldr	r3, [pc, #528]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a83      	ldr	r2, [pc, #524]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a80      	ldr	r2, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fcea 	bl	8000e84 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fce6 	bl	8000e84 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e204      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0xc0>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fcd6 	bl	8000e84 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcd2 	bl	8000e84 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1f0      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0xe8>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d063      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150a:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151e:	2b08      	cmp	r3, #8
 8001520:	d11c      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1c4      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4952      	ldr	r1, [pc, #328]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	e03a      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_RCC_OscConfig+0x2b0>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fc8b 	bl	8000e84 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fc87 	bl	8000e84 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1a5      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4940      	ldr	r1, [pc, #256]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
 80015a4:	e015      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_RCC_OscConfig+0x2b0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fc6a 	bl	8000e84 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff fc66 	bl	8000e84 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e184      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d030      	beq.n	8001640 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d016      	beq.n	8001614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_OscConfig+0x2b4>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fc4a 	bl	8000e84 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc46 	bl	8000e84 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e164      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x200>
 8001612:	e015      	b.n	8001640 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_OscConfig+0x2b4>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fc33 	bl	8000e84 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fc2f 	bl	8000e84 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e14d      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80a0 	beq.w	800178e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10f      	bne.n	800167e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_OscConfig+0x2b8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d121      	bne.n	80016ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_RCC_OscConfig+0x2b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_RCC_OscConfig+0x2b8>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff fbf5 	bl	8000e84 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	e011      	b.n	80016c2 <HAL_RCC_OscConfig+0x2ce>
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	42470000 	.word	0x42470000
 80016a8:	42470e80 	.word	0x42470e80
 80016ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7ff fbe8 	bl	8000e84 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e106      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b85      	ldr	r3, [pc, #532]	; (80018d8 <HAL_RCC_OscConfig+0x4e4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d106      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	4a80      	ldr	r2, [pc, #512]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6713      	str	r3, [r2, #112]	; 0x70
 80016e2:	e01c      	b.n	800171e <HAL_RCC_OscConfig+0x32a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x312>
 80016ec:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a7a      	ldr	r2, [pc, #488]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	4b78      	ldr	r3, [pc, #480]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a77      	ldr	r2, [pc, #476]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0x32a>
 8001706:	4b75      	ldr	r3, [pc, #468]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	4a74      	ldr	r2, [pc, #464]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6713      	str	r3, [r2, #112]	; 0x70
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	4a71      	ldr	r2, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fbad 	bl	8000e84 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff fba9 	bl	8000e84 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0c5      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ee      	beq.n	800172e <HAL_RCC_OscConfig+0x33a>
 8001750:	e014      	b.n	800177c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fb97 	bl	8000e84 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fb93 	bl	8000e84 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e0af      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001782:	4b56      	ldr	r3, [pc, #344]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a55      	ldr	r2, [pc, #340]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 809b 	beq.w	80018ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d05c      	beq.n	800185e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d141      	bne.n	8001830 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x4ec>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fb67 	bl	8000e84 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fb63 	bl	8000e84 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e081      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017cc:	4b43      	ldr	r3, [pc, #268]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	019b      	lsls	r3, r3, #6
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	041b      	lsls	r3, r3, #16
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	061b      	lsls	r3, r3, #24
 80017fc:	4937      	ldr	r1, [pc, #220]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_OscConfig+0x4ec>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fb3c 	bl	8000e84 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff fb38 	bl	8000e84 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e056      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x41c>
 800182e:	e04e      	b.n	80018ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_OscConfig+0x4ec>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb25 	bl	8000e84 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb21 	bl	8000e84 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e03f      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x44a>
 800185c:	e037      	b.n	80018ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e032      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_RCC_OscConfig+0x4e8>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d028      	beq.n	80018ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d121      	bne.n	80018ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d11a      	bne.n	80018ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800189a:	4013      	ands	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d111      	bne.n	80018ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40007000 	.word	0x40007000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	42470060 	.word	0x42470060

080018e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0cc      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d90c      	bls.n	8001920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0b8      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	494d      	ldr	r1, [pc, #308]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d044      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e06f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e067      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4934      	ldr	r1, [pc, #208]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff fa56 	bl	8000e84 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff fa52 	bl	8000e84 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e04f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d20c      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e032      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4916      	ldr	r1, [pc, #88]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6a:	f000 f821 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	5ccb      	ldrb	r3, [r1, r3]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f9b6 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08003228 	.word	0x08003228
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	6079      	str	r1, [r7, #4]
 8001aba:	2100      	movs	r1, #0
 8001abc:	60f9      	str	r1, [r7, #12]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac6:	4952      	ldr	r1, [pc, #328]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ac8:	6889      	ldr	r1, [r1, #8]
 8001aca:	f001 010c 	and.w	r1, r1, #12
 8001ace:	2908      	cmp	r1, #8
 8001ad0:	d00d      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x3e>
 8001ad2:	2908      	cmp	r1, #8
 8001ad4:	f200 8094 	bhi.w	8001c00 <HAL_RCC_GetSysClockFreq+0x150>
 8001ad8:	2900      	cmp	r1, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x32>
 8001adc:	2904      	cmp	r1, #4
 8001ade:	d003      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ae0:	e08e      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ae4:	60bb      	str	r3, [r7, #8]
       break;
 8001ae6:	e08e      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x168>)
 8001aea:	60bb      	str	r3, [r7, #8]
      break;
 8001aec:	e08b      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aee:	4948      	ldr	r1, [pc, #288]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001af0:	6849      	ldr	r1, [r1, #4]
 8001af2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001af6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af8:	4945      	ldr	r1, [pc, #276]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001afa:	6849      	ldr	r1, [r1, #4]
 8001afc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001b00:	2900      	cmp	r1, #0
 8001b02:	d024      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b04:	4942      	ldr	r1, [pc, #264]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b06:	6849      	ldr	r1, [r1, #4]
 8001b08:	0989      	lsrs	r1, r1, #6
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001b14:	f04f 0500 	mov.w	r5, #0
 8001b18:	ea00 0204 	and.w	r2, r0, r4
 8001b1c:	ea01 0305 	and.w	r3, r1, r5
 8001b20:	493d      	ldr	r1, [pc, #244]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b22:	fb01 f003 	mul.w	r0, r1, r3
 8001b26:	2100      	movs	r1, #0
 8001b28:	fb01 f102 	mul.w	r1, r1, r2
 8001b2c:	1844      	adds	r4, r0, r1
 8001b2e:	493a      	ldr	r1, [pc, #232]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b30:	fba2 0101 	umull	r0, r1, r2, r1
 8001b34:	1863      	adds	r3, r4, r1
 8001b36:	4619      	mov	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	f7fe fb54 	bl	80001ec <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e04a      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	461a      	mov	r2, r3
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	ea02 0400 	and.w	r4, r2, r0
 8001b66:	ea03 0501 	and.w	r5, r3, r1
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	014b      	lsls	r3, r1, #5
 8001b78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b7c:	0142      	lsls	r2, r0, #5
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	1b00      	subs	r0, r0, r4
 8001b84:	eb61 0105 	sbc.w	r1, r1, r5
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	018b      	lsls	r3, r1, #6
 8001b92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b96:	0182      	lsls	r2, r0, #6
 8001b98:	1a12      	subs	r2, r2, r0
 8001b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9e:	f04f 0000 	mov.w	r0, #0
 8001ba2:	f04f 0100 	mov.w	r1, #0
 8001ba6:	00d9      	lsls	r1, r3, #3
 8001ba8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bac:	00d0      	lsls	r0, r2, #3
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	1912      	adds	r2, r2, r4
 8001bb4:	eb45 0303 	adc.w	r3, r5, r3
 8001bb8:	f04f 0000 	mov.w	r0, #0
 8001bbc:	f04f 0100 	mov.w	r1, #0
 8001bc0:	0299      	lsls	r1, r3, #10
 8001bc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bc6:	0290      	lsls	r0, r2, #10
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	f7fe fb08 	bl	80001ec <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	60bb      	str	r3, [r7, #8]
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c02:	60bb      	str	r3, [r7, #8]
      break;
 8001c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c06:	68bb      	ldr	r3, [r7, #8]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	017d7840 	.word	0x017d7840

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000000 	.word	0x20000000

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff0 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08003238 	.word	0x08003238

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c60:	f7ff ffdc 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0b5b      	lsrs	r3, r3, #13
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	08003238 	.word	0x08003238

08001c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e041      	b.n	8001d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe ff3a 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f000 fb48 	bl	8002358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e041      	b.n	8001db8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f839 	bl	8001dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f000 faf9 	bl	8002358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_TIM_PWM_Start+0x24>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e022      	b.n	8001e3e <HAL_TIM_PWM_Start+0x6a>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d109      	bne.n	8001e12 <HAL_TIM_PWM_Start+0x3e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	e015      	b.n	8001e3e <HAL_TIM_PWM_Start+0x6a>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d109      	bne.n	8001e2c <HAL_TIM_PWM_Start+0x58>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e008      	b.n	8001e3e <HAL_TIM_PWM_Start+0x6a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e07c      	b.n	8001f40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d104      	bne.n	8001e56 <HAL_TIM_PWM_Start+0x82>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e54:	e013      	b.n	8001e7e <HAL_TIM_PWM_Start+0xaa>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d104      	bne.n	8001e66 <HAL_TIM_PWM_Start+0x92>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e64:	e00b      	b.n	8001e7e <HAL_TIM_PWM_Start+0xaa>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d104      	bne.n	8001e76 <HAL_TIM_PWM_Start+0xa2>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e74:	e003      	b.n	8001e7e <HAL_TIM_PWM_Start+0xaa>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2201      	movs	r2, #1
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fd50 	bl	800292c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <HAL_TIM_PWM_Start+0x174>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_PWM_Start+0xcc>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_TIM_PWM_Start+0x178>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_TIM_PWM_Start+0xd0>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_TIM_PWM_Start+0xd2>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_TIM_PWM_Start+0x174>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d022      	beq.n	8001f0a <HAL_TIM_PWM_Start+0x136>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ecc:	d01d      	beq.n	8001f0a <HAL_TIM_PWM_Start+0x136>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_TIM_PWM_Start+0x17c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d018      	beq.n	8001f0a <HAL_TIM_PWM_Start+0x136>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_TIM_PWM_Start+0x180>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_TIM_PWM_Start+0x136>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <HAL_TIM_PWM_Start+0x184>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00e      	beq.n	8001f0a <HAL_TIM_PWM_Start+0x136>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <HAL_TIM_PWM_Start+0x178>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_TIM_PWM_Start+0x136>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_TIM_PWM_Start+0x188>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d004      	beq.n	8001f0a <HAL_TIM_PWM_Start+0x136>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_TIM_PWM_Start+0x18c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d010      	beq.n	8001f3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2c:	e007      	b.n	8001f3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40010400 	.word	0x40010400
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40000c00 	.word	0x40000c00
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	40001800 	.word	0x40001800

08001f64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fcd8 	bl	800292c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <HAL_TIM_PWM_Stop+0xd8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_TIM_PWM_Stop+0x2c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	; (8002040 <HAL_TIM_PWM_Stop+0xdc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_TIM_PWM_Stop+0x30>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_TIM_PWM_Stop+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d017      	beq.n	8001fca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_TIM_PWM_Stop+0x66>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a1a      	ldr	r2, [r3, #32]
 8001fb0:	f240 4344 	movw	r3, #1092	; 0x444
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <HAL_TIM_PWM_Stop+0x66>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_TIM_PWM_Stop+0x96>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a1a      	ldr	r2, [r3, #32]
 8001fe0:	f240 4344 	movw	r3, #1092	; 0x444
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <HAL_TIM_PWM_Stop+0x96>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d104      	bne.n	800200a <HAL_TIM_PWM_Stop+0xa6>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002008:	e013      	b.n	8002032 <HAL_TIM_PWM_Stop+0xce>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d104      	bne.n	800201a <HAL_TIM_PWM_Stop+0xb6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002018:	e00b      	b.n	8002032 <HAL_TIM_PWM_Stop+0xce>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d104      	bne.n	800202a <HAL_TIM_PWM_Stop+0xc6>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002028:	e003      	b.n	8002032 <HAL_TIM_PWM_Stop+0xce>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40010000 	.word	0x40010000
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800205e:	2302      	movs	r3, #2
 8002060:	e0ae      	b.n	80021c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0c      	cmp	r3, #12
 800206e:	f200 809f 	bhi.w	80021b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020ad 	.word	0x080020ad
 800207c:	080021b1 	.word	0x080021b1
 8002080:	080021b1 	.word	0x080021b1
 8002084:	080021b1 	.word	0x080021b1
 8002088:	080020ed 	.word	0x080020ed
 800208c:	080021b1 	.word	0x080021b1
 8002090:	080021b1 	.word	0x080021b1
 8002094:	080021b1 	.word	0x080021b1
 8002098:	0800212f 	.word	0x0800212f
 800209c:	080021b1 	.word	0x080021b1
 80020a0:	080021b1 	.word	0x080021b1
 80020a4:	080021b1 	.word	0x080021b1
 80020a8:	0800216f 	.word	0x0800216f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f9f0 	bl	8002498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0208 	orr.w	r2, r2, #8
 80020c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0204 	bic.w	r2, r2, #4
 80020d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6999      	ldr	r1, [r3, #24]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	619a      	str	r2, [r3, #24]
      break;
 80020ea:	e064      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fa40 	bl	8002578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6999      	ldr	r1, [r3, #24]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	021a      	lsls	r2, r3, #8
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	619a      	str	r2, [r3, #24]
      break;
 800212c:	e043      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fa95 	bl	8002664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0208 	orr.w	r2, r2, #8
 8002148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0204 	bic.w	r2, r2, #4
 8002158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69d9      	ldr	r1, [r3, #28]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	61da      	str	r2, [r3, #28]
      break;
 800216c:	e023      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fae9 	bl	800274c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69d9      	ldr	r1, [r3, #28]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	021a      	lsls	r2, r3, #8
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	61da      	str	r2, [r3, #28]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	75fb      	strb	r3, [r7, #23]
      break;
 80021b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_TIM_ConfigClockSource+0x1c>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0b4      	b.n	800234e <HAL_TIM_ConfigClockSource+0x186>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800220a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221c:	d03e      	beq.n	800229c <HAL_TIM_ConfigClockSource+0xd4>
 800221e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002222:	f200 8087 	bhi.w	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222a:	f000 8086 	beq.w	800233a <HAL_TIM_ConfigClockSource+0x172>
 800222e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002232:	d87f      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002234:	2b70      	cmp	r3, #112	; 0x70
 8002236:	d01a      	beq.n	800226e <HAL_TIM_ConfigClockSource+0xa6>
 8002238:	2b70      	cmp	r3, #112	; 0x70
 800223a:	d87b      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 800223c:	2b60      	cmp	r3, #96	; 0x60
 800223e:	d050      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002240:	2b60      	cmp	r3, #96	; 0x60
 8002242:	d877      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002244:	2b50      	cmp	r3, #80	; 0x50
 8002246:	d03c      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002248:	2b50      	cmp	r3, #80	; 0x50
 800224a:	d873      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d058      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x13a>
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d86f      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002254:	2b30      	cmp	r3, #48	; 0x30
 8002256:	d064      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x15a>
 8002258:	2b30      	cmp	r3, #48	; 0x30
 800225a:	d86b      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 800225c:	2b20      	cmp	r3, #32
 800225e:	d060      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x15a>
 8002260:	2b20      	cmp	r3, #32
 8002262:	d867      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002264:	2b00      	cmp	r3, #0
 8002266:	d05c      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x15a>
 8002268:	2b10      	cmp	r3, #16
 800226a:	d05a      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x15a>
 800226c:	e062      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6899      	ldr	r1, [r3, #8]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f000 fb35 	bl	80028ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	609a      	str	r2, [r3, #8]
      break;
 800229a:	e04f      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f000 fb1e 	bl	80028ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022be:	609a      	str	r2, [r3, #8]
      break;
 80022c0:	e03c      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 fa92 	bl	80027f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2150      	movs	r1, #80	; 0x50
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 faeb 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 80022e0:	e02c      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f000 fab1 	bl	8002856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2160      	movs	r1, #96	; 0x60
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fadb 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002300:	e01c      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	461a      	mov	r2, r3
 8002310:	f000 fa72 	bl	80027f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	4618      	mov	r0, r3
 800231c:	f000 facb 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002320:	e00c      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	4610      	mov	r0, r2
 800232e:	f000 fac2 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002332:	e003      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e000      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800233a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a40      	ldr	r2, [pc, #256]	; (800246c <TIM_Base_SetConfig+0x114>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <TIM_Base_SetConfig+0x40>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d00f      	beq.n	8002398 <TIM_Base_SetConfig+0x40>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3d      	ldr	r2, [pc, #244]	; (8002470 <TIM_Base_SetConfig+0x118>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00b      	beq.n	8002398 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <TIM_Base_SetConfig+0x11c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d007      	beq.n	8002398 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <TIM_Base_SetConfig+0x120>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d003      	beq.n	8002398 <TIM_Base_SetConfig+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3a      	ldr	r2, [pc, #232]	; (800247c <TIM_Base_SetConfig+0x124>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d108      	bne.n	80023aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2f      	ldr	r2, [pc, #188]	; (800246c <TIM_Base_SetConfig+0x114>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02b      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d027      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <TIM_Base_SetConfig+0x118>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d023      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <TIM_Base_SetConfig+0x11c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <TIM_Base_SetConfig+0x120>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01b      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a29      	ldr	r2, [pc, #164]	; (800247c <TIM_Base_SetConfig+0x124>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d017      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a28      	ldr	r2, [pc, #160]	; (8002480 <TIM_Base_SetConfig+0x128>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a27      	ldr	r2, [pc, #156]	; (8002484 <TIM_Base_SetConfig+0x12c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00f      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a26      	ldr	r2, [pc, #152]	; (8002488 <TIM_Base_SetConfig+0x130>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00b      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a25      	ldr	r2, [pc, #148]	; (800248c <TIM_Base_SetConfig+0x134>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a24      	ldr	r2, [pc, #144]	; (8002490 <TIM_Base_SetConfig+0x138>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a23      	ldr	r2, [pc, #140]	; (8002494 <TIM_Base_SetConfig+0x13c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d108      	bne.n	800241c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <TIM_Base_SetConfig+0x114>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d003      	beq.n	8002450 <TIM_Base_SetConfig+0xf8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a0c      	ldr	r2, [pc, #48]	; (800247c <TIM_Base_SetConfig+0x124>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d103      	bne.n	8002458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	615a      	str	r2, [r3, #20]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40010000 	.word	0x40010000
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800
 8002478:	40000c00 	.word	0x40000c00
 800247c:	40010400 	.word	0x40010400
 8002480:	40014000 	.word	0x40014000
 8002484:	40014400 	.word	0x40014400
 8002488:	40014800 	.word	0x40014800
 800248c:	40001800 	.word	0x40001800
 8002490:	40001c00 	.word	0x40001c00
 8002494:	40002000 	.word	0x40002000

08002498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f023 0201 	bic.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f023 0302 	bic.w	r3, r3, #2
 80024e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a20      	ldr	r2, [pc, #128]	; (8002570 <TIM_OC1_SetConfig+0xd8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d003      	beq.n	80024fc <TIM_OC1_SetConfig+0x64>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <TIM_OC1_SetConfig+0xdc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d10c      	bne.n	8002516 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0308 	bic.w	r3, r3, #8
 8002502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a15      	ldr	r2, [pc, #84]	; (8002570 <TIM_OC1_SetConfig+0xd8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d003      	beq.n	8002526 <TIM_OC1_SetConfig+0x8e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <TIM_OC1_SetConfig+0xdc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800252c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	621a      	str	r2, [r3, #32]
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40010000 	.word	0x40010000
 8002574:	40010400 	.word	0x40010400

08002578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0210 	bic.w	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f023 0320 	bic.w	r3, r3, #32
 80025c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a22      	ldr	r2, [pc, #136]	; (800265c <TIM_OC2_SetConfig+0xe4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d003      	beq.n	80025e0 <TIM_OC2_SetConfig+0x68>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <TIM_OC2_SetConfig+0xe8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d10d      	bne.n	80025fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <TIM_OC2_SetConfig+0xe4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <TIM_OC2_SetConfig+0x94>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a16      	ldr	r2, [pc, #88]	; (8002660 <TIM_OC2_SetConfig+0xe8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d113      	bne.n	8002634 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800261a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40010000 	.word	0x40010000
 8002660:	40010400 	.word	0x40010400

08002664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a21      	ldr	r2, [pc, #132]	; (8002744 <TIM_OC3_SetConfig+0xe0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d003      	beq.n	80026ca <TIM_OC3_SetConfig+0x66>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a20      	ldr	r2, [pc, #128]	; (8002748 <TIM_OC3_SetConfig+0xe4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10d      	bne.n	80026e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <TIM_OC3_SetConfig+0xe0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_OC3_SetConfig+0x92>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <TIM_OC3_SetConfig+0xe4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d113      	bne.n	800271e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	621a      	str	r2, [r3, #32]
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40010000 	.word	0x40010000
 8002748:	40010400 	.word	0x40010400

0800274c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	031b      	lsls	r3, r3, #12
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <TIM_OC4_SetConfig+0xa4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_OC4_SetConfig+0x68>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <TIM_OC4_SetConfig+0xa8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d109      	bne.n	80027c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	019b      	lsls	r3, r3, #6
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	621a      	str	r2, [r3, #32]
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40010400 	.word	0x40010400

080027f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0201 	bic.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f023 030a 	bic.w	r3, r3, #10
 8002834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002856:	b480      	push	{r7}
 8002858:	b087      	sub	sp, #28
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	031b      	lsls	r3, r3, #12
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f043 0307 	orr.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	431a      	orrs	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	2201      	movs	r2, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	43db      	mvns	r3, r3
 800294e:	401a      	ands	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_TIMEx_PWMN_Start+0x24>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e022      	b.n	80029e2 <HAL_TIMEx_PWMN_Start+0x6a>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d109      	bne.n	80029b6 <HAL_TIMEx_PWMN_Start+0x3e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e015      	b.n	80029e2 <HAL_TIMEx_PWMN_Start+0x6a>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d109      	bne.n	80029d0 <HAL_TIMEx_PWMN_Start+0x58>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e008      	b.n	80029e2 <HAL_TIMEx_PWMN_Start+0x6a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06d      	b.n	8002ac6 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_TIMEx_PWMN_Start+0x82>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f8:	e013      	b.n	8002a22 <HAL_TIMEx_PWMN_Start+0xaa>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d104      	bne.n	8002a0a <HAL_TIMEx_PWMN_Start+0x92>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a08:	e00b      	b.n	8002a22 <HAL_TIMEx_PWMN_Start+0xaa>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d104      	bne.n	8002a1a <HAL_TIMEx_PWMN_Start+0xa2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a18:	e003      	b.n	8002a22 <HAL_TIMEx_PWMN_Start+0xaa>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2204      	movs	r2, #4
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f98a 	bl	8002d44 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <HAL_TIMEx_PWMN_Start+0x158>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d022      	beq.n	8002a90 <HAL_TIMEx_PWMN_Start+0x118>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a52:	d01d      	beq.n	8002a90 <HAL_TIMEx_PWMN_Start+0x118>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_TIMEx_PWMN_Start+0x15c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d018      	beq.n	8002a90 <HAL_TIMEx_PWMN_Start+0x118>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_TIMEx_PWMN_Start+0x160>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <HAL_TIMEx_PWMN_Start+0x118>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <HAL_TIMEx_PWMN_Start+0x164>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00e      	beq.n	8002a90 <HAL_TIMEx_PWMN_Start+0x118>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <HAL_TIMEx_PWMN_Start+0x168>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d009      	beq.n	8002a90 <HAL_TIMEx_PWMN_Start+0x118>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_TIMEx_PWMN_Start+0x118>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <HAL_TIMEx_PWMN_Start+0x170>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d010      	beq.n	8002ac4 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	e007      	b.n	8002ac4 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800
 8002adc:	40000c00 	.word	0x40000c00
 8002ae0:	40010400 	.word	0x40010400
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	40001800 	.word	0x40001800

08002aec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f920 	bl	8002d44 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <HAL_TIMEx_PWMN_Stop+0x48>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_TIMEx_PWMN_Stop+0x48>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10f      	bne.n	8002b64 <HAL_TIMEx_PWMN_Stop+0x78>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a1a      	ldr	r2, [r3, #32]
 8002b4a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_TIMEx_PWMN_Stop+0x78>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <HAL_TIMEx_PWMN_Stop+0x88>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b72:	e013      	b.n	8002b9c <HAL_TIMEx_PWMN_Stop+0xb0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d104      	bne.n	8002b84 <HAL_TIMEx_PWMN_Stop+0x98>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b82:	e00b      	b.n	8002b9c <HAL_TIMEx_PWMN_Stop+0xb0>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d104      	bne.n	8002b94 <HAL_TIMEx_PWMN_Stop+0xa8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b92:	e003      	b.n	8002b9c <HAL_TIMEx_PWMN_Stop+0xb0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e05a      	b.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d01d      	beq.n	8002c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d10c      	bne.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40000800 	.word	0x40000800
 8002c90:	40000c00 	.word	0x40000c00
 8002c94:	40010400 	.word	0x40010400
 8002c98:	40014000 	.word	0x40014000
 8002c9c:	40001800 	.word	0x40001800

08002ca0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e03d      	b.n	8002d38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2204      	movs	r2, #4
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e03f      	b.n	8002e20 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7fd ff51 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2224      	movs	r2, #36	; 0x24
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f828 	bl	8002e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	b09f      	sub	sp, #124	; 0x7c
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	68d9      	ldr	r1, [r3, #12]
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	ea40 0301 	orr.w	r3, r0, r1
 8002e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e6c:	f021 010c 	bic.w	r1, r1, #12
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e76:	430b      	orrs	r3, r1
 8002e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e86:	6999      	ldr	r1, [r3, #24]
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	ea40 0301 	orr.w	r3, r0, r1
 8002e90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4bc5      	ldr	r3, [pc, #788]	; (80031ac <UART_SetConfig+0x384>)
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d004      	beq.n	8002ea6 <UART_SetConfig+0x7e>
 8002e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4bc3      	ldr	r3, [pc, #780]	; (80031b0 <UART_SetConfig+0x388>)
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d103      	bne.n	8002eae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ea6:	f7fe fed9 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 8002eaa:	6778      	str	r0, [r7, #116]	; 0x74
 8002eac:	e002      	b.n	8002eb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eae:	f7fe fec1 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8002eb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ebc:	f040 80b6 	bne.w	800302c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	f04f 0500 	mov.w	r5, #0
 8002ec8:	4622      	mov	r2, r4
 8002eca:	462b      	mov	r3, r5
 8002ecc:	1891      	adds	r1, r2, r2
 8002ece:	6439      	str	r1, [r7, #64]	; 0x40
 8002ed0:	415b      	adcs	r3, r3
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ed8:	1912      	adds	r2, r2, r4
 8002eda:	eb45 0303 	adc.w	r3, r5, r3
 8002ede:	f04f 0000 	mov.w	r0, #0
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	00d9      	lsls	r1, r3, #3
 8002ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eec:	00d0      	lsls	r0, r2, #3
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	1911      	adds	r1, r2, r4
 8002ef4:	6639      	str	r1, [r7, #96]	; 0x60
 8002ef6:	416b      	adcs	r3, r5
 8002ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f14:	f7fd f96a 	bl	80001ec <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4ba5      	ldr	r3, [pc, #660]	; (80031b4 <UART_SetConfig+0x38c>)
 8002f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	011e      	lsls	r6, r3, #4
 8002f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f28:	461c      	mov	r4, r3
 8002f2a:	f04f 0500 	mov.w	r5, #0
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	1891      	adds	r1, r2, r2
 8002f34:	6339      	str	r1, [r7, #48]	; 0x30
 8002f36:	415b      	adcs	r3, r3
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f3e:	1912      	adds	r2, r2, r4
 8002f40:	eb45 0303 	adc.w	r3, r5, r3
 8002f44:	f04f 0000 	mov.w	r0, #0
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	00d9      	lsls	r1, r3, #3
 8002f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f52:	00d0      	lsls	r0, r2, #3
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	1911      	adds	r1, r2, r4
 8002f5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f5c:	416b      	adcs	r3, r5
 8002f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	461a      	mov	r2, r3
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	1891      	adds	r1, r2, r2
 8002f6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f6e:	415b      	adcs	r3, r3
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f7a:	f7fd f937 	bl	80001ec <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4b8c      	ldr	r3, [pc, #560]	; (80031b4 <UART_SetConfig+0x38c>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a87      	ldr	r2, [pc, #540]	; (80031b4 <UART_SetConfig+0x38c>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fa4:	441e      	add	r6, r3
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	1894      	adds	r4, r2, r2
 8002fb4:	623c      	str	r4, [r7, #32]
 8002fb6:	415b      	adcs	r3, r3
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fbe:	1812      	adds	r2, r2, r0
 8002fc0:	eb41 0303 	adc.w	r3, r1, r3
 8002fc4:	f04f 0400 	mov.w	r4, #0
 8002fc8:	f04f 0500 	mov.w	r5, #0
 8002fcc:	00dd      	lsls	r5, r3, #3
 8002fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fd2:	00d4      	lsls	r4, r2, #3
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1814      	adds	r4, r2, r0
 8002fda:	653c      	str	r4, [r7, #80]	; 0x50
 8002fdc:	414b      	adcs	r3, r1
 8002fde:	657b      	str	r3, [r7, #84]	; 0x54
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	1891      	adds	r1, r2, r2
 8002fec:	61b9      	str	r1, [r7, #24]
 8002fee:	415b      	adcs	r3, r3
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002ffa:	f7fd f8f7 	bl	80001ec <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4b6c      	ldr	r3, [pc, #432]	; (80031b4 <UART_SetConfig+0x38c>)
 8003004:	fba3 1302 	umull	r1, r3, r3, r2
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	2164      	movs	r1, #100	; 0x64
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	3332      	adds	r3, #50	; 0x32
 8003016:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <UART_SetConfig+0x38c>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	f003 0207 	and.w	r2, r3, #7
 8003022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4432      	add	r2, r6
 8003028:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800302a:	e0b9      	b.n	80031a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800302c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302e:	461c      	mov	r4, r3
 8003030:	f04f 0500 	mov.w	r5, #0
 8003034:	4622      	mov	r2, r4
 8003036:	462b      	mov	r3, r5
 8003038:	1891      	adds	r1, r2, r2
 800303a:	6139      	str	r1, [r7, #16]
 800303c:	415b      	adcs	r3, r3
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003044:	1912      	adds	r2, r2, r4
 8003046:	eb45 0303 	adc.w	r3, r5, r3
 800304a:	f04f 0000 	mov.w	r0, #0
 800304e:	f04f 0100 	mov.w	r1, #0
 8003052:	00d9      	lsls	r1, r3, #3
 8003054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003058:	00d0      	lsls	r0, r2, #3
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	eb12 0804 	adds.w	r8, r2, r4
 8003062:	eb43 0905 	adc.w	r9, r3, r5
 8003066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	008b      	lsls	r3, r1, #2
 800307a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800307e:	0082      	lsls	r2, r0, #2
 8003080:	4640      	mov	r0, r8
 8003082:	4649      	mov	r1, r9
 8003084:	f7fd f8b2 	bl	80001ec <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4b49      	ldr	r3, [pc, #292]	; (80031b4 <UART_SetConfig+0x38c>)
 800308e:	fba3 2302 	umull	r2, r3, r3, r2
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	011e      	lsls	r6, r3, #4
 8003096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003098:	4618      	mov	r0, r3
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	1894      	adds	r4, r2, r2
 80030a4:	60bc      	str	r4, [r7, #8]
 80030a6:	415b      	adcs	r3, r3
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ae:	1812      	adds	r2, r2, r0
 80030b0:	eb41 0303 	adc.w	r3, r1, r3
 80030b4:	f04f 0400 	mov.w	r4, #0
 80030b8:	f04f 0500 	mov.w	r5, #0
 80030bc:	00dd      	lsls	r5, r3, #3
 80030be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030c2:	00d4      	lsls	r4, r2, #3
 80030c4:	4622      	mov	r2, r4
 80030c6:	462b      	mov	r3, r5
 80030c8:	1814      	adds	r4, r2, r0
 80030ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80030cc:	414b      	adcs	r3, r1
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f04f 0100 	mov.w	r1, #0
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030e8:	0082      	lsls	r2, r0, #2
 80030ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80030ee:	f7fd f87d 	bl	80001ec <__aeabi_uldivmod>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <UART_SetConfig+0x38c>)
 80030f8:	fba3 1302 	umull	r1, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	3332      	adds	r3, #50	; 0x32
 800310a:	4a2a      	ldr	r2, [pc, #168]	; (80031b4 <UART_SetConfig+0x38c>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003116:	441e      	add	r6, r3
 8003118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311a:	4618      	mov	r0, r3
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	1894      	adds	r4, r2, r2
 8003126:	603c      	str	r4, [r7, #0]
 8003128:	415b      	adcs	r3, r3
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003130:	1812      	adds	r2, r2, r0
 8003132:	eb41 0303 	adc.w	r3, r1, r3
 8003136:	f04f 0400 	mov.w	r4, #0
 800313a:	f04f 0500 	mov.w	r5, #0
 800313e:	00dd      	lsls	r5, r3, #3
 8003140:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003144:	00d4      	lsls	r4, r2, #3
 8003146:	4622      	mov	r2, r4
 8003148:	462b      	mov	r3, r5
 800314a:	eb12 0a00 	adds.w	sl, r2, r0
 800314e:	eb43 0b01 	adc.w	fp, r3, r1
 8003152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4618      	mov	r0, r3
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	008b      	lsls	r3, r1, #2
 8003166:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800316a:	0082      	lsls	r2, r0, #2
 800316c:	4650      	mov	r0, sl
 800316e:	4659      	mov	r1, fp
 8003170:	f7fd f83c 	bl	80001ec <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <UART_SetConfig+0x38c>)
 800317a:	fba3 1302 	umull	r1, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2164      	movs	r1, #100	; 0x64
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <UART_SetConfig+0x38c>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4432      	add	r2, r6
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	377c      	adds	r7, #124	; 0x7c
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031aa:	bf00      	nop
 80031ac:	40011000 	.word	0x40011000
 80031b0:	40011400 	.word	0x40011400
 80031b4:	51eb851f 	.word	0x51eb851f

080031b8 <__libc_init_array>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	4d0d      	ldr	r5, [pc, #52]	; (80031f0 <__libc_init_array+0x38>)
 80031bc:	4c0d      	ldr	r4, [pc, #52]	; (80031f4 <__libc_init_array+0x3c>)
 80031be:	1b64      	subs	r4, r4, r5
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	2600      	movs	r6, #0
 80031c4:	42a6      	cmp	r6, r4
 80031c6:	d109      	bne.n	80031dc <__libc_init_array+0x24>
 80031c8:	4d0b      	ldr	r5, [pc, #44]	; (80031f8 <__libc_init_array+0x40>)
 80031ca:	4c0c      	ldr	r4, [pc, #48]	; (80031fc <__libc_init_array+0x44>)
 80031cc:	f000 f820 	bl	8003210 <_init>
 80031d0:	1b64      	subs	r4, r4, r5
 80031d2:	10a4      	asrs	r4, r4, #2
 80031d4:	2600      	movs	r6, #0
 80031d6:	42a6      	cmp	r6, r4
 80031d8:	d105      	bne.n	80031e6 <__libc_init_array+0x2e>
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e0:	4798      	blx	r3
 80031e2:	3601      	adds	r6, #1
 80031e4:	e7ee      	b.n	80031c4 <__libc_init_array+0xc>
 80031e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ea:	4798      	blx	r3
 80031ec:	3601      	adds	r6, #1
 80031ee:	e7f2      	b.n	80031d6 <__libc_init_array+0x1e>
 80031f0:	08003248 	.word	0x08003248
 80031f4:	08003248 	.word	0x08003248
 80031f8:	08003248 	.word	0x08003248
 80031fc:	0800324c 	.word	0x0800324c

08003200 <memset>:
 8003200:	4402      	add	r2, r0
 8003202:	4603      	mov	r3, r0
 8003204:	4293      	cmp	r3, r2
 8003206:	d100      	bne.n	800320a <memset+0xa>
 8003208:	4770      	bx	lr
 800320a:	f803 1b01 	strb.w	r1, [r3], #1
 800320e:	e7f9      	b.n	8003204 <memset+0x4>

08003210 <_init>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	bf00      	nop
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr

0800321c <_fini>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr
