
motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003474  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003638  08003638  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003640  08003640  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000f4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da95  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1b  00000000  00000000  0002dad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b58  00000000  00000000  000301f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a98  00000000  00000000  00030d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da23  00000000  00000000  000537e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5c3a  00000000  00000000  00061203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00136e3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003248  00000000  00000000  00136e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003608 	.word	0x08003608

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08003608 	.word	0x08003608

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ea:	f000 fda7 	bl	800103c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ee:	f000 f869 	bl	80005c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f2:	f000 fa3d 	bl	8000970 <MX_GPIO_Init>
	MX_TIM1_Init();
 80004f6:	f000 f8d5 	bl	80006a4 <MX_TIM1_Init>
	MX_UART4_Init();
 80004fa:	f000 f9dd 	bl	80008b8 <MX_UART4_Init>
	MX_TIM2_Init();
 80004fe:	f000 f98b 	bl	8000818 <MX_TIM2_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

//HAL_TIM_Base_Start(&htim1);
	uint8_t state = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	73fb      	strb	r3, [r7, #15]

//m oc pb14
//m pwm pb15
//o ac pb11
//en gate pb13
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050c:	482a      	ldr	r0, [pc, #168]	; (80005b8 <main+0xd4>)
 800050e:	f001 f899 	bl	8001644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000518:	4827      	ldr	r0, [pc, #156]	; (80005b8 <main+0xd4>)
 800051a:	f001 f893 	bl	8001644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000524:	4824      	ldr	r0, [pc, #144]	; (80005b8 <main+0xd4>)
 8000526:	f001 f88d 	bl	8001644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000530:	4821      	ldr	r0, [pc, #132]	; (80005b8 <main+0xd4>)
 8000532:	f001 f887 	bl	8001644 <HAL_GPIO_WritePin>

	uint8_t power = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	77fb      	strb	r3, [r7, #31]
	state = GPIOC->IDR & 7;
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <main+0xd8>)
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f003 0307 	and.w	r3, r3, #7
 8000544:	73fb      	strb	r3, [r7, #15]
//char ch = state + 0x30;
//HAL_UART_Transmit(&huart4,(uint8_t *)&ch, 1, 0xFFFF);
//HAL_Delay(100);
//state = motor_drive(state);

	int yon = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
	int sayac = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
	 sayac = 0;

	 }
	 */
	char ch;
	int rpm_counter = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
	uint8_t ex_state = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	75fb      	strb	r3, [r7, #23]
	int rpm;
	int minute_count = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
	while (1) {
		/* USER CODE END WHILE */
		power = motor_start_stop(power);
 800055a:	7ffb      	ldrb	r3, [r7, #31]
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fa87 	bl	8000a70 <motor_start_stop>
 8000562:	4603      	mov	r3, r0
 8000564:	77fb      	strb	r3, [r7, #31]

		state = motor_drive(ex_state, SPEED);
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <main+0xdc>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	7dfb      	ldrb	r3, [r7, #23]
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fadc 	bl	8000b2c <motor_drive>
 8000574:	4603      	mov	r3, r0
 8000576:	73fb      	strb	r3, [r7, #15]

		if (ex_state != state) {
 8000578:	7dfa      	ldrb	r2, [r7, #23]
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	429a      	cmp	r2, r3
 800057e:	d004      	beq.n	800058a <main+0xa6>
			rpm_counter++;
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	3301      	adds	r3, #1
 8000584:	61bb      	str	r3, [r7, #24]
			ex_state = state;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	75fb      	strb	r3, [r7, #23]
		}

		if (TIM2->CNT == 18000-1) {
 800058a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000590:	f244 624f 	movw	r2, #17999	; 0x464f
 8000594:	4293      	cmp	r3, r2
 8000596:	d1e0      	bne.n	800055a <main+0x76>
			if(minute_count < 600)
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800059e:	da03      	bge.n	80005a8 <main+0xc4>
				minute_count++;
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	3301      	adds	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	e7d8      	b.n	800055a <main+0x76>
			else {
				rpm = rpm_counter*6/6;
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	603b      	str	r3, [r7, #0]
				rpm_counter = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
				minute_count = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
		power = motor_start_stop(power);
 80005b4:	e7d1      	b.n	800055a <main+0x76>
 80005b6:	bf00      	nop
 80005b8:	40020400 	.word	0x40020400
 80005bc:	40020800 	.word	0x40020800
 80005c0:	20000000 	.word	0x20000000

080005c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f810 	bl	80035f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemClock_Config+0xd8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemClock_Config+0xd8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xd8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xdc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <SystemClock_Config+0xdc>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xdc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000638:	23b4      	movs	r3, #180	; 0xb4
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f865 	bl	8001718 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
		Error_Handler();
 8000654:	f000 fa06 	bl	8000a64 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000658:	f001 f80e 	bl	8001678 <HAL_PWREx_EnableOverDrive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xa2>
		Error_Handler();
 8000662:	f000 f9ff 	bl	8000a64 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000676:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2105      	movs	r1, #5
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fabf 	bl	8001c08 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xd0>
		Error_Handler();
 8000690:	f000 f9e8 	bl	8000a64 <Error_Handler>
	}
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b096      	sub	sp, #88	; 0x58
 80006a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 ff8b 	bl	80035f8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80006e2:	4b4b      	ldr	r3, [pc, #300]	; (8000810 <MX_TIM1_Init+0x16c>)
 80006e4:	4a4b      	ldr	r2, [pc, #300]	; (8000814 <MX_TIM1_Init+0x170>)
 80006e6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80006e8:	4b49      	ldr	r3, [pc, #292]	; (8000810 <MX_TIM1_Init+0x16c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b48      	ldr	r3, [pc, #288]	; (8000810 <MX_TIM1_Init+0x16c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3999;
 80006f4:	4b46      	ldr	r3, [pc, #280]	; (8000810 <MX_TIM1_Init+0x16c>)
 80006f6:	f640 729f 	movw	r2, #3999	; 0xf9f
 80006fa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b44      	ldr	r3, [pc, #272]	; (8000810 <MX_TIM1_Init+0x16c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000702:	4b43      	ldr	r3, [pc, #268]	; (8000810 <MX_TIM1_Init+0x16c>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000708:	4b41      	ldr	r3, [pc, #260]	; (8000810 <MX_TIM1_Init+0x16c>)
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800070e:	4840      	ldr	r0, [pc, #256]	; (8000810 <MX_TIM1_Init+0x16c>)
 8000710:	f001 fc4a 	bl	8001fa8 <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800071a:	f000 f9a3 	bl	8000a64 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000724:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000728:	4619      	mov	r1, r3
 800072a:	4839      	ldr	r0, [pc, #228]	; (8000810 <MX_TIM1_Init+0x16c>)
 800072c:	f001 ff48 	bl	80025c0 <HAL_TIM_ConfigClockSource>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x96>
		Error_Handler();
 8000736:	f000 f995 	bl	8000a64 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800073a:	4835      	ldr	r0, [pc, #212]	; (8000810 <MX_TIM1_Init+0x16c>)
 800073c:	f001 fcec 	bl	8002118 <HAL_TIM_PWM_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8000746:	f000 f98d 	bl	8000a64 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000756:	4619      	mov	r1, r3
 8000758:	482d      	ldr	r0, [pc, #180]	; (8000810 <MX_TIM1_Init+0x16c>)
 800075a:	f002 fc21 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000764:	f000 f97e 	bl	8000a64 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000768:	2360      	movs	r3, #96	; 0x60
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 399;
 800076c:	f240 138f 	movw	r3, #399	; 0x18f
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800077a:	2304      	movs	r3, #4
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	4820      	ldr	r0, [pc, #128]	; (8000810 <MX_TIM1_Init+0x16c>)
 8000790:	f001 fe54 	bl	800243c <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800079a:	f000 f963 	bl	8000a64 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	2204      	movs	r2, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_TIM1_Init+0x16c>)
 80007a8:	f001 fe48 	bl	800243c <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 80007b2:	f000 f957 	bl	8000a64 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	2208      	movs	r2, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_TIM1_Init+0x16c>)
 80007c0:	f001 fe3c 	bl	800243c <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 80007ca:	f000 f94b 	bl	8000a64 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM1_Init+0x16c>)
 80007f2:	f002 fc51 	bl	8003098 <HAL_TIMEx_ConfigBreakDeadTime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x15c>
			!= HAL_OK) {
		Error_Handler();
 80007fc:	f000 f932 	bl	8000a64 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM1_Init+0x16c>)
 8000802:	f000 faf3 	bl	8000dec <HAL_TIM_MspPostInit>

}
 8000806:	bf00      	nop
 8000808:	3758      	adds	r7, #88	; 0x58
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000002c 	.word	0x2000002c
 8000814:	40010000 	.word	0x40010000

08000818 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_TIM2_Init+0x9c>)
 8000836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_TIM2_Init+0x9c>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_TIM2_Init+0x9c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 18000;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_TIM2_Init+0x9c>)
 800084a:	f244 6250 	movw	r2, #18000	; 0x4650
 800084e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_TIM2_Init+0x9c>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_TIM2_Init+0x9c>)
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800085c:	4815      	ldr	r0, [pc, #84]	; (80008b4 <MX_TIM2_Init+0x9c>)
 800085e:	f001 fba3 	bl	8001fa8 <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x54>
		Error_Handler();
 8000868:	f000 f8fc 	bl	8000a64 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4619      	mov	r1, r3
 8000878:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_TIM2_Init+0x9c>)
 800087a:	f001 fea1 	bl	80025c0 <HAL_TIM_ConfigClockSource>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000884:	f000 f8ee 	bl	8000a64 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <MX_TIM2_Init+0x9c>)
 8000896:	f002 fb83 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80008a0:	f000 f8e0 	bl	8000a64 <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim2);
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <MX_TIM2_Init+0x9c>)
 80008a6:	f001 fbcf 	bl	8002048 <HAL_TIM_Base_Start>
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000b8 	.word	0x200000b8

080008b8 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_Init 0 */

	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */
	__HAL_RCC_GPIOA_CLK_ENABLE(); /* Enable clock to PORTA - UART2 pins PA2 and PA3 */
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <MX_UART4_Init+0xa8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a26      	ldr	r2, [pc, #152]	; (8000960 <MX_UART4_Init+0xa8>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <MX_UART4_Init+0xa8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_UART4_CLK_ENABLE(); /* Enable clock to UART2 module */
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_UART4_Init+0xa8>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a1f      	ldr	r2, [pc, #124]	; (8000960 <MX_UART4_Init+0xa8>)
 80008e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_UART4_Init+0xa8>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef UART4_GPIO_Handler; /*Create GPIO_InitTypeDef struct instance */
	UART4_GPIO_Handler.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80008f6:	2303      	movs	r3, #3
 80008f8:	60fb      	str	r3, [r7, #12]
	UART4_GPIO_Handler.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
	UART4_GPIO_Handler.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
	UART4_GPIO_Handler.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
	UART4_GPIO_Handler.Alternate = GPIO_AF8_UART4;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &UART4_GPIO_Handler);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4814      	ldr	r0, [pc, #80]	; (8000964 <MX_UART4_Init+0xac>)
 8000912:	f000 fceb 	bl	80012ec <HAL_GPIO_Init>
	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_UART4_Init+0xb0>)
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <MX_UART4_Init+0xb4>)
 800091a:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_UART4_Init+0xb0>)
 800091e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000922:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_UART4_Init+0xb0>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_UART4_Init+0xb0>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_UART4_Init+0xb0>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_UART4_Init+0xb0>)
 8000938:	220c      	movs	r2, #12
 800093a:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_UART4_Init+0xb0>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_UART4_Init+0xb0>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_UART4_Init+0xb0>)
 800094a:	f002 fc1c 	bl	8003186 <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_UART4_Init+0xa0>
		Error_Handler();
 8000954:	f000 f886 	bl	8000a64 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	20000074 	.word	0x20000074
 800096c:	40004c00 	.word	0x40004c00

08000970 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <MX_GPIO_Init+0xe8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <MX_GPIO_Init+0xe8>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_GPIO_Init+0xe8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a24      	ldr	r2, [pc, #144]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <MX_GPIO_Init+0xec>)
 80009fe:	f000 fe21 	bl	8001644 <HAL_GPIO_WritePin>
			GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC1 PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4812      	ldr	r0, [pc, #72]	; (8000a60 <MX_GPIO_Init+0xf0>)
 8000a16:	f000 fc69 	bl	80012ec <HAL_GPIO_Init>

	/*Configure GPIO pin : PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_GPIO_Init+0xf0>)
 8000a2e:	f000 fc5d 	bl	80012ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB11 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000a32:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8000a36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_GPIO_Init+0xec>)
 8000a4c:	f000 fc4e 	bl	80012ec <HAL_GPIO_Init>

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40020800 	.word	0x40020800

08000a64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <motor_start_stop>:
#include "motor.h"

TIM_HandleTypeDef htim1;
UART_HandleTypeDef huart4;

uint8_t motor_start_stop(uint8_t power){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]

	uint8_t button_read = (GPIOC -> IDR >> 3) & 1;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <motor_start_stop+0xb4>)
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	08db      	lsrs	r3, r3, #3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]

	if(button_read == 1){
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d107      	bne.n	8000a9e <motor_start_stop+0x2e>
		power = power ^ 1 ;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	71fb      	strb	r3, [r7, #7]
		power = power & 1;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	71fb      	strb	r3, [r7, #7]
	}

	if(button_read == 1 && power == 1){
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d11b      	bne.n	8000adc <motor_start_stop+0x6c>
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d118      	bne.n	8000adc <motor_start_stop+0x6c>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PWM1
 8000aaa:	2100      	movs	r1, #0
 8000aac:	481e      	ldr	r0, [pc, #120]	; (8000b28 <motor_start_stop+0xb8>)
 8000aae:	f001 fb8d 	bl	80021cc <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // PWM2
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	481c      	ldr	r0, [pc, #112]	; (8000b28 <motor_start_stop+0xb8>)
 8000ab6:	f002 f95b 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // PWM1
 8000aba:	2104      	movs	r1, #4
 8000abc:	481a      	ldr	r0, [pc, #104]	; (8000b28 <motor_start_stop+0xb8>)
 8000abe:	f001 fb85 	bl	80021cc <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // PWM2
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4818      	ldr	r0, [pc, #96]	; (8000b28 <motor_start_stop+0xb8>)
 8000ac6:	f002 f953 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // PWM1
 8000aca:	2108      	movs	r1, #8
 8000acc:	4816      	ldr	r0, [pc, #88]	; (8000b28 <motor_start_stop+0xb8>)
 8000ace:	f001 fb7d 	bl	80021cc <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // PWM2
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <motor_start_stop+0xb8>)
 8000ad6:	f002 f94b 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
 8000ada:	e01d      	b.n	8000b18 <motor_start_stop+0xa8>
	}
	else if(button_read == 1 && power == 0){
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d11a      	bne.n	8000b18 <motor_start_stop+0xa8>
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d117      	bne.n	8000b18 <motor_start_stop+0xa8>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // PWM1
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480f      	ldr	r0, [pc, #60]	; (8000b28 <motor_start_stop+0xb8>)
 8000aec:	f001 fc36 	bl	800235c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); // PWM2
 8000af0:	2100      	movs	r1, #0
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <motor_start_stop+0xb8>)
 8000af4:	f002 f9f6 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // PWM1
 8000af8:	2104      	movs	r1, #4
 8000afa:	480b      	ldr	r0, [pc, #44]	; (8000b28 <motor_start_stop+0xb8>)
 8000afc:	f001 fc2e 	bl	800235c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); // PWM2
 8000b00:	2104      	movs	r1, #4
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <motor_start_stop+0xb8>)
 8000b04:	f002 f9ee 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); // PWM1
 8000b08:	2108      	movs	r1, #8
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <motor_start_stop+0xb8>)
 8000b0c:	f001 fc26 	bl	800235c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); // PWM2
 8000b10:	2108      	movs	r1, #8
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <motor_start_stop+0xb8>)
 8000b14:	f002 f9e6 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>
	}

	return power;
 8000b18:	79fb      	ldrb	r3, [r7, #7]

}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40020800 	.word	0x40020800
 8000b28:	2000002c 	.word	0x2000002c

08000b2c <motor_drive>:


uint8_t motor_drive(uint8_t ex_state, int speed) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]

  uint8_t state;
  TIM1 -> ARR = speed;
 8000b38:	4a79      	ldr	r2, [pc, #484]	; (8000d20 <motor_drive+0x1f4>)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	62d3      	str	r3, [r2, #44]	; 0x2c
  int duty = speed/10;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4a78      	ldr	r2, [pc, #480]	; (8000d24 <motor_drive+0x1f8>)
 8000b42:	fb82 1203 	smull	r1, r2, r2, r3
 8000b46:	1092      	asrs	r2, r2, #2
 8000b48:	17db      	asrs	r3, r3, #31
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	60bb      	str	r3, [r7, #8]


  state = (GPIOC -> IDR) & 7;
 8000b4e:	4b76      	ldr	r3, [pc, #472]	; (8000d28 <motor_drive+0x1fc>)
 8000b50:	691b      	ldr	r3, [r3, #16]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	73fb      	strb	r3, [r7, #15]
  // TIM1 CH 2  PWM 3 // PE11
  // TIM1 CH 2N PWM 4 // PB0
  // TIM1 CH 3  PWM 5 // PE13
  // TIM1 CH 3N PWM 6 // PB1

  if (state != ex_state) {
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	f000 80d1 	beq.w	8000d06 <motor_drive+0x1da>

    switch (state) {
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	f200 80ce 	bhi.w	8000d0a <motor_drive+0x1de>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <motor_drive+0x48>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000c09 	.word	0x08000c09
 8000b78:	08000cc3 	.word	0x08000cc3
 8000b7c:	08000bcb 	.word	0x08000bcb
 8000b80:	08000c85 	.word	0x08000c85
 8000b84:	08000b8d 	.word	0x08000b8d
 8000b88:	08000c47 	.word	0x08000c47
				CH1|CH1N||CH2|CH2N||CH3|CH3N
				OFF|OFF ||OFF| ON ||PWM1/2
			   */

      //CH1 and CH1N comple close
      HAL_TIM_PWM_Stop( & htim1, TIM_CHANNEL_1);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4867      	ldr	r0, [pc, #412]	; (8000d2c <motor_drive+0x200>)
 8000b90:	f001 fbe4 	bl	800235c <HAL_TIM_PWM_Stop>
      HAL_TIMEx_PWMN_Stop( & htim1, TIM_CHANNEL_1);
 8000b94:	2100      	movs	r1, #0
 8000b96:	4865      	ldr	r0, [pc, #404]	; (8000d2c <motor_drive+0x200>)
 8000b98:	f002 f9a4 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>

      //CH2 forced to zero CH2N forced to one
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_2);
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4863      	ldr	r0, [pc, #396]	; (8000d2c <motor_drive+0x200>)
 8000ba0:	f001 fb14 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_2);
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4861      	ldr	r0, [pc, #388]	; (8000d2c <motor_drive+0x200>)
 8000ba8:	f002 f8e2 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR2 = 0;
 8000bac:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <motor_drive+0x1f4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	639a      	str	r2, [r3, #56]	; 0x38

      //CH3 and CH3N PWM mode
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_3);
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	485d      	ldr	r0, [pc, #372]	; (8000d2c <motor_drive+0x200>)
 8000bb6:	f001 fb09 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_3);
 8000bba:	2108      	movs	r1, #8
 8000bbc:	485b      	ldr	r0, [pc, #364]	; (8000d2c <motor_drive+0x200>)
 8000bbe:	f002 f8d7 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR3 = duty;
 8000bc2:	4a57      	ldr	r2, [pc, #348]	; (8000d20 <motor_drive+0x1f4>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	63d3      	str	r3, [r2, #60]	; 0x3c

      break;
 8000bc8:	e0a0      	b.n	8000d0c <motor_drive+0x1e0>
        +         NC        -          0        1        0
        CH1|CH1N||CH2|CH2N||CH3|CH3N
        PWM1/2  ||OFF|OFF ||OFF| ON
       */
      //CH1 and CH1N PWM mode
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_1);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4857      	ldr	r0, [pc, #348]	; (8000d2c <motor_drive+0x200>)
 8000bce:	f001 fafd 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_1);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4855      	ldr	r0, [pc, #340]	; (8000d2c <motor_drive+0x200>)
 8000bd6:	f002 f8cb 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR1 = duty;
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <motor_drive+0x1f4>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	6353      	str	r3, [r2, #52]	; 0x34

      //CH2 CH2N closed
      HAL_TIM_PWM_Stop( & htim1, TIM_CHANNEL_2);
 8000be0:	2104      	movs	r1, #4
 8000be2:	4852      	ldr	r0, [pc, #328]	; (8000d2c <motor_drive+0x200>)
 8000be4:	f001 fbba 	bl	800235c <HAL_TIM_PWM_Stop>
      HAL_TIMEx_PWMN_Stop( & htim1, TIM_CHANNEL_2);
 8000be8:	2104      	movs	r1, #4
 8000bea:	4850      	ldr	r0, [pc, #320]	; (8000d2c <motor_drive+0x200>)
 8000bec:	f002 f97a 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>

      //CH3 forced to zero CH3N forced to one
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_3);
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	484e      	ldr	r0, [pc, #312]	; (8000d2c <motor_drive+0x200>)
 8000bf4:	f001 faea 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_3);
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	484c      	ldr	r0, [pc, #304]	; (8000d2c <motor_drive+0x200>)
 8000bfc:	f002 f8b8 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR3 = 0;
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <motor_drive+0x1f4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c

      break;
 8000c06:	e081      	b.n	8000d0c <motor_drive+0x1e0>
        +         -         NC         0        1        1
        CH1|CH1N||CH2|CH2N||CH3|CH3N
        PWM1/2  ||OFF| ON ||OFF|OFF
       */
      //CH1 and CH1N PWM mode
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_1);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4848      	ldr	r0, [pc, #288]	; (8000d2c <motor_drive+0x200>)
 8000c0c:	f001 fade 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_1);
 8000c10:	2100      	movs	r1, #0
 8000c12:	4846      	ldr	r0, [pc, #280]	; (8000d2c <motor_drive+0x200>)
 8000c14:	f002 f8ac 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR1 = duty;
 8000c18:	4a41      	ldr	r2, [pc, #260]	; (8000d20 <motor_drive+0x1f4>)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	6353      	str	r3, [r2, #52]	; 0x34

      //CH3 CH3N closed
      HAL_TIM_PWM_Stop( & htim1, TIM_CHANNEL_3);
 8000c1e:	2108      	movs	r1, #8
 8000c20:	4842      	ldr	r0, [pc, #264]	; (8000d2c <motor_drive+0x200>)
 8000c22:	f001 fb9b 	bl	800235c <HAL_TIM_PWM_Stop>
      HAL_TIMEx_PWMN_Stop( & htim1, TIM_CHANNEL_3);
 8000c26:	2108      	movs	r1, #8
 8000c28:	4840      	ldr	r0, [pc, #256]	; (8000d2c <motor_drive+0x200>)
 8000c2a:	f002 f95b 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>

      //CH2 forced to zero CH2N forced to one
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_2);
 8000c2e:	2104      	movs	r1, #4
 8000c30:	483e      	ldr	r0, [pc, #248]	; (8000d2c <motor_drive+0x200>)
 8000c32:	f001 facb 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_2);
 8000c36:	2104      	movs	r1, #4
 8000c38:	483c      	ldr	r0, [pc, #240]	; (8000d2c <motor_drive+0x200>)
 8000c3a:	f002 f899 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR2 = 0;
 8000c3e:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <motor_drive+0x1f4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	639a      	str	r2, [r3, #56]	; 0x38

      break;
 8000c44:	e062      	b.n	8000d0c <motor_drive+0x1e0>
        CH1|CH1N||CH2|CH2N||CH3|CH3N
        OFF| ON ||PWM1/2  ||OFF|OFF
       */

      //CH1 forced to zero CH1N forced to one
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_1);
 8000c46:	2100      	movs	r1, #0
 8000c48:	4838      	ldr	r0, [pc, #224]	; (8000d2c <motor_drive+0x200>)
 8000c4a:	f001 fabf 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_1);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4836      	ldr	r0, [pc, #216]	; (8000d2c <motor_drive+0x200>)
 8000c52:	f002 f88d 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR1 = 0;
 8000c56:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <motor_drive+0x1f4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34

      //CH2 and CH2N PWM mode
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_2);
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4833      	ldr	r0, [pc, #204]	; (8000d2c <motor_drive+0x200>)
 8000c60:	f001 fab4 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_2);
 8000c64:	2104      	movs	r1, #4
 8000c66:	4831      	ldr	r0, [pc, #196]	; (8000d2c <motor_drive+0x200>)
 8000c68:	f002 f882 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR2 = duty;
 8000c6c:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <motor_drive+0x1f4>)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	6393      	str	r3, [r2, #56]	; 0x38

      //CH3 CH3N closed
      HAL_TIM_PWM_Stop( & htim1, TIM_CHANNEL_3);
 8000c72:	2108      	movs	r1, #8
 8000c74:	482d      	ldr	r0, [pc, #180]	; (8000d2c <motor_drive+0x200>)
 8000c76:	f001 fb71 	bl	800235c <HAL_TIM_PWM_Stop>
      HAL_TIMEx_PWMN_Stop( & htim1, TIM_CHANNEL_3);
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	482b      	ldr	r0, [pc, #172]	; (8000d2c <motor_drive+0x200>)
 8000c7e:	f002 f931 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>

      break;
 8000c82:	e043      	b.n	8000d0c <motor_drive+0x1e0>
        -         NC        +          1        0        1
        CH1|CH1N||CH2|CH2N|CH3|CH3N
        OFF| ON ||OFF|OFF |PWM1/2
       */
      //CH1 forced to zero CH1N forced to one
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_1);
 8000c84:	2100      	movs	r1, #0
 8000c86:	4829      	ldr	r0, [pc, #164]	; (8000d2c <motor_drive+0x200>)
 8000c88:	f001 faa0 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_1);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4827      	ldr	r0, [pc, #156]	; (8000d2c <motor_drive+0x200>)
 8000c90:	f002 f86e 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR1 = 0;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <motor_drive+0x1f4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34

      //CH3 and CH3N PWM mode
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_3);
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4823      	ldr	r0, [pc, #140]	; (8000d2c <motor_drive+0x200>)
 8000c9e:	f001 fa95 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_3);
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4821      	ldr	r0, [pc, #132]	; (8000d2c <motor_drive+0x200>)
 8000ca6:	f002 f863 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR3 = duty;
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <motor_drive+0x1f4>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	63d3      	str	r3, [r2, #60]	; 0x3c

      //CH2 CH2N closed
      HAL_TIM_PWM_Stop( & htim1, TIM_CHANNEL_2);
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	481e      	ldr	r0, [pc, #120]	; (8000d2c <motor_drive+0x200>)
 8000cb4:	f001 fb52 	bl	800235c <HAL_TIM_PWM_Stop>
      HAL_TIMEx_PWMN_Stop( & htim1, TIM_CHANNEL_2);
 8000cb8:	2104      	movs	r1, #4
 8000cba:	481c      	ldr	r0, [pc, #112]	; (8000d2c <motor_drive+0x200>)
 8000cbc:	f002 f912 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>
      break;
 8000cc0:	e024      	b.n	8000d0c <motor_drive+0x1e0>
        NC        +         -          0        1        1
        CH1|CH1N||CH2|CH2N|CH3|CH3N
        OFF|OFF ||PWM1/2  |OFF| ON
       */
      //CH1 CH1N closed
      HAL_TIM_PWM_Stop( & htim1, TIM_CHANNEL_1);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4819      	ldr	r0, [pc, #100]	; (8000d2c <motor_drive+0x200>)
 8000cc6:	f001 fb49 	bl	800235c <HAL_TIM_PWM_Stop>
      HAL_TIMEx_PWMN_Stop( & htim1, TIM_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4817      	ldr	r0, [pc, #92]	; (8000d2c <motor_drive+0x200>)
 8000cce:	f002 f909 	bl	8002ee4 <HAL_TIMEx_PWMN_Stop>
      TIM1 -> CCR1 = 0;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <motor_drive+0x1f4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34

      //CH2 CH2N Pwm mode
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_2);
 8000cd8:	2104      	movs	r1, #4
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <motor_drive+0x200>)
 8000cdc:	f001 fa76 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_2);
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4812      	ldr	r0, [pc, #72]	; (8000d2c <motor_drive+0x200>)
 8000ce4:	f002 f844 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR2 = duty;
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <motor_drive+0x1f4>)
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	6393      	str	r3, [r2, #56]	; 0x38
      //CH3 forced to zero CH3N forced to one
      HAL_TIM_PWM_Start( & htim1, TIM_CHANNEL_3);
 8000cee:	2108      	movs	r1, #8
 8000cf0:	480e      	ldr	r0, [pc, #56]	; (8000d2c <motor_drive+0x200>)
 8000cf2:	f001 fa6b 	bl	80021cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start( & htim1, TIM_CHANNEL_3);
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <motor_drive+0x200>)
 8000cfa:	f002 f839 	bl	8002d70 <HAL_TIMEx_PWMN_Start>
      TIM1 -> CCR3 = 0;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <motor_drive+0x1f4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000d04:	e002      	b.n	8000d0c <motor_drive+0x1e0>
    default:
      break;
    }

  }
 8000d06:	bf00      	nop
 8000d08:	e000      	b.n	8000d0c <motor_drive+0x1e0>
      break;
 8000d0a:	bf00      	nop
  if (state == 0)
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <motor_drive+0x1ea>
    state = ex_state;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	73fb      	strb	r3, [r7, #15]
  return state;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010000 	.word	0x40010000
 8000d24:	66666667 	.word	0x66666667
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	2000002c 	.word	0x2000002c

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <HAL_TIM_Base_MspInit+0x64>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d10e      	bne.n	8000db0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_TIM_Base_MspInit+0x68>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_TIM_Base_MspInit+0x68>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_TIM_Base_MspInit+0x68>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dae:	e012      	b.n	8000dd6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d10d      	bne.n	8000dd6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_TIM_Base_MspInit+0x68>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <HAL_TIM_Base_MspInit+0x68>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_TIM_Base_MspInit+0x68>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40010000 	.word	0x40010000
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <HAL_TIM_MspPostInit+0xe0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d15a      	bne.n	8000ec4 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HAL_TIM_MspPostInit+0xe4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM1_CH3N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <HAL_TIM_MspPostInit+0xe8>)
 8000e7e:	f000 fa35 	bl	80012ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e82:	2303      	movs	r3, #3
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <HAL_TIM_MspPostInit+0xec>)
 8000e9e:	f000 fa25 	bl	80012ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000ea2:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4807      	ldr	r0, [pc, #28]	; (8000edc <HAL_TIM_MspPostInit+0xf0>)
 8000ec0:	f000 fa14 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12b      	bne.n	8000f5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_UART_MspInit+0x8c>)
 8000f56:	f000 f9c9 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004c00 	.word	0x40004c00
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f890 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffd7 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f002 facb 	bl	80035b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fa63 	bl	80004e4 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001020:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800102c:	08003648 	.word	0x08003648
  ldr r2, =_sbss
 8001030:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001034:	20000104 	.word	0x20000104

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f90d 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fe5e 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f917 	bl	80012d2 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f8ed 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000004 	.word	0x20000004
 80010d8:	2000000c 	.word	0x2000000c
 80010dc:	20000008 	.word	0x20000008

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2000000c 	.word	0x2000000c
 8001104:	20000100 	.word	0x20000100

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000100 	.word	0x20000100

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff8e 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff47 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff5c 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff8e 	bl	80011d8 <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5d 	bl	8001184 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffb0 	bl	8001240 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e177      	b.n	80015f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 8166 	bne.w	80015f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d005      	beq.n	800133e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	2b02      	cmp	r3, #2
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d017      	beq.n	80013dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80c0 	beq.w	80015f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_GPIO_Init+0x324>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a65      	ldr	r2, [pc, #404]	; (8001610 <HAL_GPIO_Init+0x324>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_GPIO_Init+0x324>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a61      	ldr	r2, [pc, #388]	; (8001614 <HAL_GPIO_Init+0x328>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_GPIO_Init+0x32c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d037      	beq.n	800152a <HAL_GPIO_Init+0x23e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a57      	ldr	r2, [pc, #348]	; (800161c <HAL_GPIO_Init+0x330>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d031      	beq.n	8001526 <HAL_GPIO_Init+0x23a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a56      	ldr	r2, [pc, #344]	; (8001620 <HAL_GPIO_Init+0x334>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d02b      	beq.n	8001522 <HAL_GPIO_Init+0x236>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a55      	ldr	r2, [pc, #340]	; (8001624 <HAL_GPIO_Init+0x338>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d025      	beq.n	800151e <HAL_GPIO_Init+0x232>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a54      	ldr	r2, [pc, #336]	; (8001628 <HAL_GPIO_Init+0x33c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01f      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a53      	ldr	r2, [pc, #332]	; (800162c <HAL_GPIO_Init+0x340>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x22a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_GPIO_Init+0x344>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x226>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a51      	ldr	r2, [pc, #324]	; (8001634 <HAL_GPIO_Init+0x348>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x222>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a50      	ldr	r2, [pc, #320]	; (8001638 <HAL_GPIO_Init+0x34c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x21e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4f      	ldr	r2, [pc, #316]	; (800163c <HAL_GPIO_Init+0x350>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x21a>
 8001502:	2309      	movs	r3, #9
 8001504:	e012      	b.n	800152c <HAL_GPIO_Init+0x240>
 8001506:	230a      	movs	r3, #10
 8001508:	e010      	b.n	800152c <HAL_GPIO_Init+0x240>
 800150a:	2308      	movs	r3, #8
 800150c:	e00e      	b.n	800152c <HAL_GPIO_Init+0x240>
 800150e:	2307      	movs	r3, #7
 8001510:	e00c      	b.n	800152c <HAL_GPIO_Init+0x240>
 8001512:	2306      	movs	r3, #6
 8001514:	e00a      	b.n	800152c <HAL_GPIO_Init+0x240>
 8001516:	2305      	movs	r3, #5
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x240>
 800151a:	2304      	movs	r3, #4
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x240>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x240>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x240>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x240>
 800152a:	2300      	movs	r3, #0
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153c:	4935      	ldr	r1, [pc, #212]	; (8001614 <HAL_GPIO_Init+0x328>)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_GPIO_Init+0x354>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156e:	4a34      	ldr	r2, [pc, #208]	; (8001640 <HAL_GPIO_Init+0x354>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001574:	4b32      	ldr	r3, [pc, #200]	; (8001640 <HAL_GPIO_Init+0x354>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001598:	4a29      	ldr	r2, [pc, #164]	; (8001640 <HAL_GPIO_Init+0x354>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <HAL_GPIO_Init+0x354>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c2:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <HAL_GPIO_Init+0x354>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_GPIO_Init+0x354>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_GPIO_Init+0x354>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3301      	adds	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	2b0f      	cmp	r3, #15
 80015fc:	f67f ae84 	bls.w	8001308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40013800 	.word	0x40013800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020400 	.word	0x40020400
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40021400 	.word	0x40021400
 8001630:	40021800 	.word	0x40021800
 8001634:	40021c00 	.word	0x40021c00
 8001638:	40022000 	.word	0x40022000
 800163c:	40022400 	.word	0x40022400
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_PWREx_EnableOverDrive+0x90>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_PWREx_EnableOverDrive+0x90>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_PWREx_EnableOverDrive+0x90>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_PWREx_EnableOverDrive+0x94>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a4:	f7ff fd30 	bl	8001108 <HAL_GetTick>
 80016a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016aa:	e009      	b.n	80016c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016ac:	f7ff fd2c 	bl	8001108 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ba:	d901      	bls.n	80016c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e01f      	b.n	8001700 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_PWREx_EnableOverDrive+0x98>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016cc:	d1ee      	bne.n	80016ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d4:	f7ff fd18 	bl	8001108 <HAL_GetTick>
 80016d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016da:	e009      	b.n	80016f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016dc:	f7ff fd14 	bl	8001108 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ea:	d901      	bls.n	80016f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e007      	b.n	8001700 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_PWREx_EnableOverDrive+0x98>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016fc:	d1ee      	bne.n	80016dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	420e0040 	.word	0x420e0040
 8001710:	40007000 	.word	0x40007000
 8001714:	420e0044 	.word	0x420e0044

08001718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e264      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d075      	beq.n	8001822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	4ba3      	ldr	r3, [pc, #652]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b04      	cmp	r3, #4
 8001740:	d00c      	beq.n	800175c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4ba0      	ldr	r3, [pc, #640]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174a:	2b08      	cmp	r3, #8
 800174c:	d112      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b9d      	ldr	r3, [pc, #628]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800175a:	d10b      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	4b99      	ldr	r3, [pc, #612]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d05b      	beq.n	8001820 <HAL_RCC_OscConfig+0x108>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d157      	bne.n	8001820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e23f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x74>
 800177e:	4b91      	ldr	r3, [pc, #580]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a90      	ldr	r2, [pc, #576]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a8a      	ldr	r2, [pc, #552]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b88      	ldr	r3, [pc, #544]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a87      	ldr	r2, [pc, #540]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 80017b0:	4b84      	ldr	r3, [pc, #528]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a83      	ldr	r2, [pc, #524]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b81      	ldr	r3, [pc, #516]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a80      	ldr	r2, [pc, #512]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc9a 	bl	8001108 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fc96 	bl	8001108 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e204      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xc0>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fc86 	bl	8001108 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fc82 	bl	8001108 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1f0      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0xe8>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d063      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b62      	ldr	r3, [pc, #392]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x152>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1c4      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4952      	ldr	r1, [pc, #328]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e03a      	b.n	80018f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <HAL_RCC_OscConfig+0x2b0>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fc3b 	bl	8001108 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fc37 	bl	8001108 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1a5      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4940      	ldr	r1, [pc, #256]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_OscConfig+0x2b0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc1a 	bl	8001108 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff fc16 	bl	8001108 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e184      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d030      	beq.n	8001964 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_RCC_OscConfig+0x2b4>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fbfa 	bl	8001108 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fbf6 	bl	8001108 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e164      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x200>
 8001936:	e015      	b.n	8001964 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x2b4>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff fbe3 	bl	8001108 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fbdf 	bl	8001108 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e14d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a0 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x2b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d121      	bne.n	80019f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_RCC_OscConfig+0x2b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_RCC_OscConfig+0x2b8>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fba5 	bl	8001108 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e011      	b.n	80019e6 <HAL_RCC_OscConfig+0x2ce>
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	42470000 	.word	0x42470000
 80019cc:	42470e80 	.word	0x42470e80
 80019d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7ff fb98 	bl	8001108 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e106      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b85      	ldr	r3, [pc, #532]	; (8001bfc <HAL_RCC_OscConfig+0x4e4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d106      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
 80019fa:	4b81      	ldr	r3, [pc, #516]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a80      	ldr	r2, [pc, #512]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	e01c      	b.n	8001a42 <HAL_RCC_OscConfig+0x32a>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x312>
 8001a10:	4b7b      	ldr	r3, [pc, #492]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a7a      	ldr	r2, [pc, #488]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b78      	ldr	r3, [pc, #480]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a77      	ldr	r2, [pc, #476]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x32a>
 8001a2a:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	4a74      	ldr	r2, [pc, #464]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6713      	str	r3, [r2, #112]	; 0x70
 8001a36:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a71      	ldr	r2, [pc, #452]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fb5d 	bl	8001108 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff fb59 	bl	8001108 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0c5      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ee      	beq.n	8001a52 <HAL_RCC_OscConfig+0x33a>
 8001a74:	e014      	b.n	8001aa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb47 	bl	8001108 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fb43 	bl	8001108 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0af      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ee      	bne.n	8001a7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d105      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa6:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a55      	ldr	r2, [pc, #340]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 809b 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d05c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d141      	bne.n	8001b54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x4ec>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fb17 	bl	8001108 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff fb13 	bl	8001108 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e081      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af0:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	019b      	lsls	r3, r3, #6
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	061b      	lsls	r3, r3, #24
 8001b20:	4937      	ldr	r1, [pc, #220]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_OscConfig+0x4ec>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff faec 	bl	8001108 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff fae8 	bl	8001108 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e056      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x41c>
 8001b52:	e04e      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_RCC_OscConfig+0x4ec>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fad5 	bl	8001108 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff fad1 	bl	8001108 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e03f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x44a>
 8001b80:	e037      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e032      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_RCC_OscConfig+0x4e8>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d028      	beq.n	8001bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d121      	bne.n	8001bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d11a      	bne.n	8001bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d111      	bne.n	8001bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	40023800 	.word	0x40023800
 8001c04:	42470060 	.word	0x42470060

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0cc      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d90c      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b65      	ldr	r3, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d044      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d119      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e067      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 0203 	bic.w	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4934      	ldr	r1, [pc, #208]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff fa06 	bl	8001108 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff fa02 	bl	8001108 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 020c 	and.w	r2, r3, #12
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1eb      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d20c      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f821 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f966 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08003620 	.word	0x08003620
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dda:	2100      	movs	r1, #0
 8001ddc:	6079      	str	r1, [r7, #4]
 8001dde:	2100      	movs	r1, #0
 8001de0:	60f9      	str	r1, [r7, #12]
 8001de2:	2100      	movs	r1, #0
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001de6:	2100      	movs	r1, #0
 8001de8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dea:	4952      	ldr	r1, [pc, #328]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dec:	6889      	ldr	r1, [r1, #8]
 8001dee:	f001 010c 	and.w	r1, r1, #12
 8001df2:	2908      	cmp	r1, #8
 8001df4:	d00d      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x3e>
 8001df6:	2908      	cmp	r1, #8
 8001df8:	f200 8094 	bhi.w	8001f24 <HAL_RCC_GetSysClockFreq+0x150>
 8001dfc:	2900      	cmp	r1, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x32>
 8001e00:	2904      	cmp	r1, #4
 8001e02:	d003      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x38>
 8001e04:	e08e      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e06:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e08:	60bb      	str	r3, [r7, #8]
       break;
 8001e0a:	e08e      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x168>)
 8001e0e:	60bb      	str	r3, [r7, #8]
      break;
 8001e10:	e08b      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e12:	4948      	ldr	r1, [pc, #288]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e14:	6849      	ldr	r1, [r1, #4]
 8001e16:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e1a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e1c:	4945      	ldr	r1, [pc, #276]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e1e:	6849      	ldr	r1, [r1, #4]
 8001e20:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e24:	2900      	cmp	r1, #0
 8001e26:	d024      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e28:	4942      	ldr	r1, [pc, #264]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e2a:	6849      	ldr	r1, [r1, #4]
 8001e2c:	0989      	lsrs	r1, r1, #6
 8001e2e:	4608      	mov	r0, r1
 8001e30:	f04f 0100 	mov.w	r1, #0
 8001e34:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001e38:	f04f 0500 	mov.w	r5, #0
 8001e3c:	ea00 0204 	and.w	r2, r0, r4
 8001e40:	ea01 0305 	and.w	r3, r1, r5
 8001e44:	493d      	ldr	r1, [pc, #244]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x168>)
 8001e46:	fb01 f003 	mul.w	r0, r1, r3
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	fb01 f102 	mul.w	r1, r1, r2
 8001e50:	1844      	adds	r4, r0, r1
 8001e52:	493a      	ldr	r1, [pc, #232]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x168>)
 8001e54:	fba2 0101 	umull	r0, r1, r2, r1
 8001e58:	1863      	adds	r3, r4, r1
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f7fe f9c2 	bl	80001ec <__aeabi_uldivmod>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e04a      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	ea02 0400 	and.w	r4, r2, r0
 8001e8a:	ea03 0501 	and.w	r5, r3, r1
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	014b      	lsls	r3, r1, #5
 8001e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ea0:	0142      	lsls	r2, r0, #5
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	1b00      	subs	r0, r0, r4
 8001ea8:	eb61 0105 	sbc.w	r1, r1, r5
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	018b      	lsls	r3, r1, #6
 8001eb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eba:	0182      	lsls	r2, r0, #6
 8001ebc:	1a12      	subs	r2, r2, r0
 8001ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec2:	f04f 0000 	mov.w	r0, #0
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	00d9      	lsls	r1, r3, #3
 8001ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed0:	00d0      	lsls	r0, r2, #3
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	1912      	adds	r2, r2, r4
 8001ed8:	eb45 0303 	adc.w	r3, r5, r3
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	0299      	lsls	r1, r3, #10
 8001ee6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001eea:	0290      	lsls	r0, r2, #10
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	f7fe f976 	bl	80001ec <__aeabi_uldivmod>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4613      	mov	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	3301      	adds	r3, #1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	60bb      	str	r3, [r7, #8]
      break;
 8001f22:	e002      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f26:	60bb      	str	r3, [r7, #8]
      break;
 8001f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bdb0      	pop	{r4, r5, r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	00f42400 	.word	0x00f42400
 8001f3c:	017d7840 	.word	0x017d7840

08001f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f5c:	f7ff fff0 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0a9b      	lsrs	r3, r3, #10
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4903      	ldr	r1, [pc, #12]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	08003630 	.word	0x08003630

08001f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f84:	f7ff ffdc 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	0b5b      	lsrs	r3, r3, #13
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	4903      	ldr	r1, [pc, #12]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f96:	5ccb      	ldrb	r3, [r1, r3]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	08003630 	.word	0x08003630

08001fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e041      	b.n	800203e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fed6 	bl	8000d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 fbb2 	bl	8002750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d001      	beq.n	8002060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e046      	b.n	80020ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a23      	ldr	r2, [pc, #140]	; (80020fc <HAL_TIM_Base_Start+0xb4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d022      	beq.n	80020b8 <HAL_TIM_Base_Start+0x70>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207a:	d01d      	beq.n	80020b8 <HAL_TIM_Base_Start+0x70>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_TIM_Base_Start+0xb8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d018      	beq.n	80020b8 <HAL_TIM_Base_Start+0x70>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_TIM_Base_Start+0xbc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_TIM_Base_Start+0x70>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_TIM_Base_Start+0xc0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00e      	beq.n	80020b8 <HAL_TIM_Base_Start+0x70>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_TIM_Base_Start+0xc4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d009      	beq.n	80020b8 <HAL_TIM_Base_Start+0x70>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_TIM_Base_Start+0xc8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_Base_Start+0x70>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a18      	ldr	r2, [pc, #96]	; (8002114 <HAL_TIM_Base_Start+0xcc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d010      	beq.n	80020ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	e007      	b.n	80020ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000
 8002100:	40000400 	.word	0x40000400
 8002104:	40000800 	.word	0x40000800
 8002108:	40000c00 	.word	0x40000c00
 800210c:	40010400 	.word	0x40010400
 8002110:	40014000 	.word	0x40014000
 8002114:	40001800 	.word	0x40001800

08002118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e041      	b.n	80021ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f839 	bl	80021b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	f000 fafa 	bl	8002750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_TIM_PWM_Start+0x24>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e022      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d109      	bne.n	800220a <HAL_TIM_PWM_Start+0x3e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	bf14      	ite	ne
 8002202:	2301      	movne	r3, #1
 8002204:	2300      	moveq	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	e015      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d109      	bne.n	8002224 <HAL_TIM_PWM_Start+0x58>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	bf14      	ite	ne
 800221c:	2301      	movne	r3, #1
 800221e:	2300      	moveq	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e008      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07c      	b.n	8002338 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_TIM_PWM_Start+0x82>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800224c:	e013      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d104      	bne.n	800225e <HAL_TIM_PWM_Start+0x92>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800225c:	e00b      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d104      	bne.n	800226e <HAL_TIM_PWM_Start+0xa2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800226c:	e003      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fd50 	bl	8002d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2d      	ldr	r2, [pc, #180]	; (8002340 <HAL_TIM_PWM_Start+0x174>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_TIM_PWM_Start+0xcc>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <HAL_TIM_PWM_Start+0x178>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_TIM_PWM_Start+0xd0>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_TIM_PWM_Start+0xd2>
 800229c:	2300      	movs	r3, #0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_TIM_PWM_Start+0x174>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_TIM_PWM_Start+0x136>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d01d      	beq.n	8002302 <HAL_TIM_PWM_Start+0x136>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_TIM_PWM_Start+0x17c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_TIM_PWM_Start+0x136>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_TIM_PWM_Start+0x180>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_TIM_PWM_Start+0x136>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_TIM_PWM_Start+0x184>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_TIM_PWM_Start+0x136>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a16      	ldr	r2, [pc, #88]	; (8002344 <HAL_TIM_PWM_Start+0x178>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_TIM_PWM_Start+0x136>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_TIM_PWM_Start+0x188>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_TIM_PWM_Start+0x136>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_TIM_PWM_Start+0x18c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b06      	cmp	r3, #6
 8002312:	d010      	beq.n	8002336 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002324:	e007      	b.n	8002336 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40010000 	.word	0x40010000
 8002344:	40010400 	.word	0x40010400
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800
 8002350:	40000c00 	.word	0x40000c00
 8002354:	40014000 	.word	0x40014000
 8002358:	40001800 	.word	0x40001800

0800235c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fcd8 	bl	8002d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a2e      	ldr	r2, [pc, #184]	; (8002434 <HAL_TIM_PWM_Stop+0xd8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_TIM_PWM_Stop+0x2c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <HAL_TIM_PWM_Stop+0xdc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_TIM_PWM_Stop+0x30>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_TIM_PWM_Stop+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d017      	beq.n	80023c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	f241 1311 	movw	r3, #4369	; 0x1111
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_TIM_PWM_Stop+0x66>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	f240 4344 	movw	r3, #1092	; 0x444
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <HAL_TIM_PWM_Stop+0x66>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10f      	bne.n	80023f2 <HAL_TIM_PWM_Stop+0x96>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	f240 4344 	movw	r3, #1092	; 0x444
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d107      	bne.n	80023f2 <HAL_TIM_PWM_Stop+0x96>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d104      	bne.n	8002402 <HAL_TIM_PWM_Stop+0xa6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002400:	e013      	b.n	800242a <HAL_TIM_PWM_Stop+0xce>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d104      	bne.n	8002412 <HAL_TIM_PWM_Stop+0xb6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002410:	e00b      	b.n	800242a <HAL_TIM_PWM_Stop+0xce>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d104      	bne.n	8002422 <HAL_TIM_PWM_Stop+0xc6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002420:	e003      	b.n	800242a <HAL_TIM_PWM_Stop+0xce>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40010000 	.word	0x40010000
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002456:	2302      	movs	r3, #2
 8002458:	e0ae      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0c      	cmp	r3, #12
 8002466:	f200 809f 	bhi.w	80025a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800246a:	a201      	add	r2, pc, #4	; (adr r2, 8002470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	080024a5 	.word	0x080024a5
 8002474:	080025a9 	.word	0x080025a9
 8002478:	080025a9 	.word	0x080025a9
 800247c:	080025a9 	.word	0x080025a9
 8002480:	080024e5 	.word	0x080024e5
 8002484:	080025a9 	.word	0x080025a9
 8002488:	080025a9 	.word	0x080025a9
 800248c:	080025a9 	.word	0x080025a9
 8002490:	08002527 	.word	0x08002527
 8002494:	080025a9 	.word	0x080025a9
 8002498:	080025a9 	.word	0x080025a9
 800249c:	080025a9 	.word	0x080025a9
 80024a0:	08002567 	.word	0x08002567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f9f0 	bl	8002890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0208 	orr.w	r2, r2, #8
 80024be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0204 	bic.w	r2, r2, #4
 80024ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6999      	ldr	r1, [r3, #24]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	619a      	str	r2, [r3, #24]
      break;
 80024e2:	e064      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fa40 	bl	8002970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6999      	ldr	r1, [r3, #24]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	021a      	lsls	r2, r3, #8
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	619a      	str	r2, [r3, #24]
      break;
 8002524:	e043      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa95 	bl	8002a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0208 	orr.w	r2, r2, #8
 8002540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0204 	bic.w	r2, r2, #4
 8002550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69d9      	ldr	r1, [r3, #28]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	61da      	str	r2, [r3, #28]
      break;
 8002564:	e023      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fae9 	bl	8002b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69d9      	ldr	r1, [r3, #28]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	021a      	lsls	r2, r3, #8
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	61da      	str	r2, [r3, #28]
      break;
 80025a6:	e002      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	75fb      	strb	r3, [r7, #23]
      break;
 80025ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_TIM_ConfigClockSource+0x1c>
 80025d8:	2302      	movs	r3, #2
 80025da:	e0b4      	b.n	8002746 <HAL_TIM_ConfigClockSource+0x186>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002614:	d03e      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0xd4>
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	f200 8087 	bhi.w	800272c <HAL_TIM_ConfigClockSource+0x16c>
 800261e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002622:	f000 8086 	beq.w	8002732 <HAL_TIM_ConfigClockSource+0x172>
 8002626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262a:	d87f      	bhi.n	800272c <HAL_TIM_ConfigClockSource+0x16c>
 800262c:	2b70      	cmp	r3, #112	; 0x70
 800262e:	d01a      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0xa6>
 8002630:	2b70      	cmp	r3, #112	; 0x70
 8002632:	d87b      	bhi.n	800272c <HAL_TIM_ConfigClockSource+0x16c>
 8002634:	2b60      	cmp	r3, #96	; 0x60
 8002636:	d050      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x11a>
 8002638:	2b60      	cmp	r3, #96	; 0x60
 800263a:	d877      	bhi.n	800272c <HAL_TIM_ConfigClockSource+0x16c>
 800263c:	2b50      	cmp	r3, #80	; 0x50
 800263e:	d03c      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0xfa>
 8002640:	2b50      	cmp	r3, #80	; 0x50
 8002642:	d873      	bhi.n	800272c <HAL_TIM_ConfigClockSource+0x16c>
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d058      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0x13a>
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d86f      	bhi.n	800272c <HAL_TIM_ConfigClockSource+0x16c>
 800264c:	2b30      	cmp	r3, #48	; 0x30
 800264e:	d064      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x15a>
 8002650:	2b30      	cmp	r3, #48	; 0x30
 8002652:	d86b      	bhi.n	800272c <HAL_TIM_ConfigClockSource+0x16c>
 8002654:	2b20      	cmp	r3, #32
 8002656:	d060      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x15a>
 8002658:	2b20      	cmp	r3, #32
 800265a:	d867      	bhi.n	800272c <HAL_TIM_ConfigClockSource+0x16c>
 800265c:	2b00      	cmp	r3, #0
 800265e:	d05c      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x15a>
 8002660:	2b10      	cmp	r3, #16
 8002662:	d05a      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x15a>
 8002664:	e062      	b.n	800272c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f000 fb35 	bl	8002ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	609a      	str	r2, [r3, #8]
      break;
 8002692:	e04f      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f000 fb1e 	bl	8002ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026b6:	609a      	str	r2, [r3, #8]
      break;
 80026b8:	e03c      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f000 fa92 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2150      	movs	r1, #80	; 0x50
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 faeb 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 80026d8:	e02c      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f000 fab1 	bl	8002c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2160      	movs	r1, #96	; 0x60
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fadb 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 80026f8:	e01c      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f000 fa72 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	4618      	mov	r0, r3
 8002714:	f000 facb 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 8002718:	e00c      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f000 fac2 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 800272a:	e003      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e000      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a40      	ldr	r2, [pc, #256]	; (8002864 <TIM_Base_SetConfig+0x114>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <TIM_Base_SetConfig+0x40>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276e:	d00f      	beq.n	8002790 <TIM_Base_SetConfig+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3d      	ldr	r2, [pc, #244]	; (8002868 <TIM_Base_SetConfig+0x118>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00b      	beq.n	8002790 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a3c      	ldr	r2, [pc, #240]	; (800286c <TIM_Base_SetConfig+0x11c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <TIM_Base_SetConfig+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3b      	ldr	r2, [pc, #236]	; (8002870 <TIM_Base_SetConfig+0x120>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d003      	beq.n	8002790 <TIM_Base_SetConfig+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3a      	ldr	r2, [pc, #232]	; (8002874 <TIM_Base_SetConfig+0x124>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d108      	bne.n	80027a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a2f      	ldr	r2, [pc, #188]	; (8002864 <TIM_Base_SetConfig+0x114>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d02b      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b0:	d027      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a2c      	ldr	r2, [pc, #176]	; (8002868 <TIM_Base_SetConfig+0x118>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d023      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a2b      	ldr	r2, [pc, #172]	; (800286c <TIM_Base_SetConfig+0x11c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01f      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <TIM_Base_SetConfig+0x120>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01b      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a29      	ldr	r2, [pc, #164]	; (8002874 <TIM_Base_SetConfig+0x124>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d017      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a28      	ldr	r2, [pc, #160]	; (8002878 <TIM_Base_SetConfig+0x128>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a27      	ldr	r2, [pc, #156]	; (800287c <TIM_Base_SetConfig+0x12c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00f      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a26      	ldr	r2, [pc, #152]	; (8002880 <TIM_Base_SetConfig+0x130>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00b      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a25      	ldr	r2, [pc, #148]	; (8002884 <TIM_Base_SetConfig+0x134>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a24      	ldr	r2, [pc, #144]	; (8002888 <TIM_Base_SetConfig+0x138>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a23      	ldr	r2, [pc, #140]	; (800288c <TIM_Base_SetConfig+0x13c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d108      	bne.n	8002814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <TIM_Base_SetConfig+0x114>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d003      	beq.n	8002848 <TIM_Base_SetConfig+0xf8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <TIM_Base_SetConfig+0x124>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d103      	bne.n	8002850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	615a      	str	r2, [r3, #20]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40010000 	.word	0x40010000
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40010400 	.word	0x40010400
 8002878:	40014000 	.word	0x40014000
 800287c:	40014400 	.word	0x40014400
 8002880:	40014800 	.word	0x40014800
 8002884:	40001800 	.word	0x40001800
 8002888:	40001c00 	.word	0x40001c00
 800288c:	40002000 	.word	0x40002000

08002890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f023 0201 	bic.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0303 	bic.w	r3, r3, #3
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f023 0302 	bic.w	r3, r3, #2
 80028d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <TIM_OC1_SetConfig+0xd8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_OC1_SetConfig+0x64>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <TIM_OC1_SetConfig+0xdc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10c      	bne.n	800290e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0308 	bic.w	r3, r3, #8
 80028fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <TIM_OC1_SetConfig+0xd8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <TIM_OC1_SetConfig+0x8e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <TIM_OC1_SetConfig+0xdc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d111      	bne.n	8002942 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800292c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	621a      	str	r2, [r3, #32]
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40010000 	.word	0x40010000
 800296c:	40010400 	.word	0x40010400

08002970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f023 0210 	bic.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f023 0320 	bic.w	r3, r3, #32
 80029ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <TIM_OC2_SetConfig+0xe4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_OC2_SetConfig+0x68>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <TIM_OC2_SetConfig+0xe8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10d      	bne.n	80029f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <TIM_OC2_SetConfig+0xe4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_OC2_SetConfig+0x94>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <TIM_OC2_SetConfig+0xe8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d113      	bne.n	8002a2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010400 	.word	0x40010400

08002a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <TIM_OC3_SetConfig+0xe0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_OC3_SetConfig+0x66>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <TIM_OC3_SetConfig+0xe4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10d      	bne.n	8002ade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <TIM_OC3_SetConfig+0xe0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_OC3_SetConfig+0x92>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a15      	ldr	r2, [pc, #84]	; (8002b40 <TIM_OC3_SetConfig+0xe4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d113      	bne.n	8002b16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	621a      	str	r2, [r3, #32]
}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40010400 	.word	0x40010400

08002b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	031b      	lsls	r3, r3, #12
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <TIM_OC4_SetConfig+0xa4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_OC4_SetConfig+0x68>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a11      	ldr	r2, [pc, #68]	; (8002bec <TIM_OC4_SetConfig+0xa8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d109      	bne.n	8002bc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40010000 	.word	0x40010000
 8002bec:	40010400 	.word	0x40010400

08002bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 030a 	bic.w	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b087      	sub	sp, #28
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f023 0210 	bic.w	r2, r3, #16
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	031b      	lsls	r3, r3, #12
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f043 0307 	orr.w	r3, r3, #7
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	021a      	lsls	r2, r3, #8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2201      	movs	r2, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_TIMEx_PWMN_Start+0x24>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e022      	b.n	8002dda <HAL_TIMEx_PWMN_Start+0x6a>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d109      	bne.n	8002dae <HAL_TIMEx_PWMN_Start+0x3e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	bf14      	ite	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	2300      	moveq	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	e015      	b.n	8002dda <HAL_TIMEx_PWMN_Start+0x6a>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d109      	bne.n	8002dc8 <HAL_TIMEx_PWMN_Start+0x58>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e008      	b.n	8002dda <HAL_TIMEx_PWMN_Start+0x6a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e06d      	b.n	8002ebe <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_TIMEx_PWMN_Start+0x82>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df0:	e013      	b.n	8002e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d104      	bne.n	8002e02 <HAL_TIMEx_PWMN_Start+0x92>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e00:	e00b      	b.n	8002e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d104      	bne.n	8002e12 <HAL_TIMEx_PWMN_Start+0xa2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e10:	e003      	b.n	8002e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f98a 	bl	800313c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_TIMEx_PWMN_Start+0x158>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d022      	beq.n	8002e88 <HAL_TIMEx_PWMN_Start+0x118>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d01d      	beq.n	8002e88 <HAL_TIMEx_PWMN_Start+0x118>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <HAL_TIMEx_PWMN_Start+0x15c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d018      	beq.n	8002e88 <HAL_TIMEx_PWMN_Start+0x118>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_TIMEx_PWMN_Start+0x160>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_TIMEx_PWMN_Start+0x118>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <HAL_TIMEx_PWMN_Start+0x164>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00e      	beq.n	8002e88 <HAL_TIMEx_PWMN_Start+0x118>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <HAL_TIMEx_PWMN_Start+0x168>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_TIMEx_PWMN_Start+0x118>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a18      	ldr	r2, [pc, #96]	; (8002edc <HAL_TIMEx_PWMN_Start+0x16c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_TIMEx_PWMN_Start+0x118>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <HAL_TIMEx_PWMN_Start+0x170>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d111      	bne.n	8002eac <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d010      	beq.n	8002ebc <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	e007      	b.n	8002ebc <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00
 8002ed8:	40010400 	.word	0x40010400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40001800 	.word	0x40001800

08002ee4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f920 	bl	800313c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10f      	bne.n	8002f2c <HAL_TIMEx_PWMN_Stop+0x48>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	f240 4344 	movw	r3, #1092	; 0x444
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_TIMEx_PWMN_Stop+0x48>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10f      	bne.n	8002f5c <HAL_TIMEx_PWMN_Stop+0x78>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	f240 4344 	movw	r3, #1092	; 0x444
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_TIMEx_PWMN_Stop+0x78>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <HAL_TIMEx_PWMN_Stop+0x88>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f6a:	e013      	b.n	8002f94 <HAL_TIMEx_PWMN_Stop+0xb0>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d104      	bne.n	8002f7c <HAL_TIMEx_PWMN_Stop+0x98>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f7a:	e00b      	b.n	8002f94 <HAL_TIMEx_PWMN_Stop+0xb0>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d104      	bne.n	8002f8c <HAL_TIMEx_PWMN_Stop+0xa8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8a:	e003      	b.n	8002f94 <HAL_TIMEx_PWMN_Stop+0xb0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e05a      	b.n	800306e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d01d      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d018      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10c      	bne.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4313      	orrs	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800
 8003088:	40000c00 	.word	0x40000c00
 800308c:	40010400 	.word	0x40010400
 8003090:	40014000 	.word	0x40014000
 8003094:	40001800 	.word	0x40001800

08003098 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e03d      	b.n	8003130 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2204      	movs	r2, #4
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a1a      	ldr	r2, [r3, #32]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e03f      	b.n	8003218 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d106      	bne.n	80031b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fd fe97 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2224      	movs	r2, #36	; 0x24
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f828 	bl	8003220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	b09f      	sub	sp, #124	; 0x7c
 8003226:	af00      	add	r7, sp, #0
 8003228:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003236:	68d9      	ldr	r1, [r3, #12]
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	ea40 0301 	orr.w	r3, r0, r1
 8003240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	431a      	orrs	r2, r3
 800324c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	431a      	orrs	r2, r3
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800325a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003264:	f021 010c 	bic.w	r1, r1, #12
 8003268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800326e:	430b      	orrs	r3, r1
 8003270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327e:	6999      	ldr	r1, [r3, #24]
 8003280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	ea40 0301 	orr.w	r3, r0, r1
 8003288:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800328a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4bc5      	ldr	r3, [pc, #788]	; (80035a4 <UART_SetConfig+0x384>)
 8003290:	429a      	cmp	r2, r3
 8003292:	d004      	beq.n	800329e <UART_SetConfig+0x7e>
 8003294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4bc3      	ldr	r3, [pc, #780]	; (80035a8 <UART_SetConfig+0x388>)
 800329a:	429a      	cmp	r2, r3
 800329c:	d103      	bne.n	80032a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800329e:	f7fe fe6f 	bl	8001f80 <HAL_RCC_GetPCLK2Freq>
 80032a2:	6778      	str	r0, [r7, #116]	; 0x74
 80032a4:	e002      	b.n	80032ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032a6:	f7fe fe57 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 80032aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b4:	f040 80b6 	bne.w	8003424 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ba:	461c      	mov	r4, r3
 80032bc:	f04f 0500 	mov.w	r5, #0
 80032c0:	4622      	mov	r2, r4
 80032c2:	462b      	mov	r3, r5
 80032c4:	1891      	adds	r1, r2, r2
 80032c6:	6439      	str	r1, [r7, #64]	; 0x40
 80032c8:	415b      	adcs	r3, r3
 80032ca:	647b      	str	r3, [r7, #68]	; 0x44
 80032cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032d0:	1912      	adds	r2, r2, r4
 80032d2:	eb45 0303 	adc.w	r3, r5, r3
 80032d6:	f04f 0000 	mov.w	r0, #0
 80032da:	f04f 0100 	mov.w	r1, #0
 80032de:	00d9      	lsls	r1, r3, #3
 80032e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032e4:	00d0      	lsls	r0, r2, #3
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	1911      	adds	r1, r2, r4
 80032ec:	6639      	str	r1, [r7, #96]	; 0x60
 80032ee:	416b      	adcs	r3, r5
 80032f0:	667b      	str	r3, [r7, #100]	; 0x64
 80032f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003300:	415b      	adcs	r3, r3
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800330c:	f7fc ff6e 	bl	80001ec <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4ba5      	ldr	r3, [pc, #660]	; (80035ac <UART_SetConfig+0x38c>)
 8003316:	fba3 2302 	umull	r2, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	011e      	lsls	r6, r3, #4
 800331e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003320:	461c      	mov	r4, r3
 8003322:	f04f 0500 	mov.w	r5, #0
 8003326:	4622      	mov	r2, r4
 8003328:	462b      	mov	r3, r5
 800332a:	1891      	adds	r1, r2, r2
 800332c:	6339      	str	r1, [r7, #48]	; 0x30
 800332e:	415b      	adcs	r3, r3
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
 8003332:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003336:	1912      	adds	r2, r2, r4
 8003338:	eb45 0303 	adc.w	r3, r5, r3
 800333c:	f04f 0000 	mov.w	r0, #0
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	00d9      	lsls	r1, r3, #3
 8003346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800334a:	00d0      	lsls	r0, r2, #3
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	1911      	adds	r1, r2, r4
 8003352:	65b9      	str	r1, [r7, #88]	; 0x58
 8003354:	416b      	adcs	r3, r5
 8003356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	461a      	mov	r2, r3
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	1891      	adds	r1, r2, r2
 8003364:	62b9      	str	r1, [r7, #40]	; 0x28
 8003366:	415b      	adcs	r3, r3
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800336e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003372:	f7fc ff3b 	bl	80001ec <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4b8c      	ldr	r3, [pc, #560]	; (80035ac <UART_SetConfig+0x38c>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a87      	ldr	r2, [pc, #540]	; (80035ac <UART_SetConfig+0x38c>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800339c:	441e      	add	r6, r3
 800339e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a0:	4618      	mov	r0, r3
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	1894      	adds	r4, r2, r2
 80033ac:	623c      	str	r4, [r7, #32]
 80033ae:	415b      	adcs	r3, r3
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033b6:	1812      	adds	r2, r2, r0
 80033b8:	eb41 0303 	adc.w	r3, r1, r3
 80033bc:	f04f 0400 	mov.w	r4, #0
 80033c0:	f04f 0500 	mov.w	r5, #0
 80033c4:	00dd      	lsls	r5, r3, #3
 80033c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033ca:	00d4      	lsls	r4, r2, #3
 80033cc:	4622      	mov	r2, r4
 80033ce:	462b      	mov	r3, r5
 80033d0:	1814      	adds	r4, r2, r0
 80033d2:	653c      	str	r4, [r7, #80]	; 0x50
 80033d4:	414b      	adcs	r3, r1
 80033d6:	657b      	str	r3, [r7, #84]	; 0x54
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	461a      	mov	r2, r3
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	1891      	adds	r1, r2, r2
 80033e4:	61b9      	str	r1, [r7, #24]
 80033e6:	415b      	adcs	r3, r3
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033f2:	f7fc fefb 	bl	80001ec <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4b6c      	ldr	r3, [pc, #432]	; (80035ac <UART_SetConfig+0x38c>)
 80033fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	2164      	movs	r1, #100	; 0x64
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	3332      	adds	r3, #50	; 0x32
 800340e:	4a67      	ldr	r2, [pc, #412]	; (80035ac <UART_SetConfig+0x38c>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	f003 0207 	and.w	r2, r3, #7
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4432      	add	r2, r6
 8003420:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003422:	e0b9      	b.n	8003598 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003426:	461c      	mov	r4, r3
 8003428:	f04f 0500 	mov.w	r5, #0
 800342c:	4622      	mov	r2, r4
 800342e:	462b      	mov	r3, r5
 8003430:	1891      	adds	r1, r2, r2
 8003432:	6139      	str	r1, [r7, #16]
 8003434:	415b      	adcs	r3, r3
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800343c:	1912      	adds	r2, r2, r4
 800343e:	eb45 0303 	adc.w	r3, r5, r3
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	00d9      	lsls	r1, r3, #3
 800344c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003450:	00d0      	lsls	r0, r2, #3
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	eb12 0804 	adds.w	r8, r2, r4
 800345a:	eb43 0905 	adc.w	r9, r3, r5
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	008b      	lsls	r3, r1, #2
 8003472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003476:	0082      	lsls	r2, r0, #2
 8003478:	4640      	mov	r0, r8
 800347a:	4649      	mov	r1, r9
 800347c:	f7fc feb6 	bl	80001ec <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b49      	ldr	r3, [pc, #292]	; (80035ac <UART_SetConfig+0x38c>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011e      	lsls	r6, r3, #4
 800348e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003490:	4618      	mov	r0, r3
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	1894      	adds	r4, r2, r2
 800349c:	60bc      	str	r4, [r7, #8]
 800349e:	415b      	adcs	r3, r3
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a6:	1812      	adds	r2, r2, r0
 80034a8:	eb41 0303 	adc.w	r3, r1, r3
 80034ac:	f04f 0400 	mov.w	r4, #0
 80034b0:	f04f 0500 	mov.w	r5, #0
 80034b4:	00dd      	lsls	r5, r3, #3
 80034b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034ba:	00d4      	lsls	r4, r2, #3
 80034bc:	4622      	mov	r2, r4
 80034be:	462b      	mov	r3, r5
 80034c0:	1814      	adds	r4, r2, r0
 80034c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80034c4:	414b      	adcs	r3, r1
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	008b      	lsls	r3, r1, #2
 80034dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034e0:	0082      	lsls	r2, r0, #2
 80034e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80034e6:	f7fc fe81 	bl	80001ec <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <UART_SetConfig+0x38c>)
 80034f0:	fba3 1302 	umull	r1, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	2164      	movs	r1, #100	; 0x64
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	3332      	adds	r3, #50	; 0x32
 8003502:	4a2a      	ldr	r2, [pc, #168]	; (80035ac <UART_SetConfig+0x38c>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350e:	441e      	add	r6, r3
 8003510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003512:	4618      	mov	r0, r3
 8003514:	f04f 0100 	mov.w	r1, #0
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	1894      	adds	r4, r2, r2
 800351e:	603c      	str	r4, [r7, #0]
 8003520:	415b      	adcs	r3, r3
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003528:	1812      	adds	r2, r2, r0
 800352a:	eb41 0303 	adc.w	r3, r1, r3
 800352e:	f04f 0400 	mov.w	r4, #0
 8003532:	f04f 0500 	mov.w	r5, #0
 8003536:	00dd      	lsls	r5, r3, #3
 8003538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800353c:	00d4      	lsls	r4, r2, #3
 800353e:	4622      	mov	r2, r4
 8003540:	462b      	mov	r3, r5
 8003542:	eb12 0a00 	adds.w	sl, r2, r0
 8003546:	eb43 0b01 	adc.w	fp, r3, r1
 800354a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4618      	mov	r0, r3
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	008b      	lsls	r3, r1, #2
 800355e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003562:	0082      	lsls	r2, r0, #2
 8003564:	4650      	mov	r0, sl
 8003566:	4659      	mov	r1, fp
 8003568:	f7fc fe40 	bl	80001ec <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <UART_SetConfig+0x38c>)
 8003572:	fba3 1302 	umull	r1, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2164      	movs	r1, #100	; 0x64
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	3332      	adds	r3, #50	; 0x32
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <UART_SetConfig+0x38c>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	f003 020f 	and.w	r2, r3, #15
 8003590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4432      	add	r2, r6
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	377c      	adds	r7, #124	; 0x7c
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a2:	bf00      	nop
 80035a4:	40011000 	.word	0x40011000
 80035a8:	40011400 	.word	0x40011400
 80035ac:	51eb851f 	.word	0x51eb851f

080035b0 <__libc_init_array>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4d0d      	ldr	r5, [pc, #52]	; (80035e8 <__libc_init_array+0x38>)
 80035b4:	4c0d      	ldr	r4, [pc, #52]	; (80035ec <__libc_init_array+0x3c>)
 80035b6:	1b64      	subs	r4, r4, r5
 80035b8:	10a4      	asrs	r4, r4, #2
 80035ba:	2600      	movs	r6, #0
 80035bc:	42a6      	cmp	r6, r4
 80035be:	d109      	bne.n	80035d4 <__libc_init_array+0x24>
 80035c0:	4d0b      	ldr	r5, [pc, #44]	; (80035f0 <__libc_init_array+0x40>)
 80035c2:	4c0c      	ldr	r4, [pc, #48]	; (80035f4 <__libc_init_array+0x44>)
 80035c4:	f000 f820 	bl	8003608 <_init>
 80035c8:	1b64      	subs	r4, r4, r5
 80035ca:	10a4      	asrs	r4, r4, #2
 80035cc:	2600      	movs	r6, #0
 80035ce:	42a6      	cmp	r6, r4
 80035d0:	d105      	bne.n	80035de <__libc_init_array+0x2e>
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d8:	4798      	blx	r3
 80035da:	3601      	adds	r6, #1
 80035dc:	e7ee      	b.n	80035bc <__libc_init_array+0xc>
 80035de:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e2:	4798      	blx	r3
 80035e4:	3601      	adds	r6, #1
 80035e6:	e7f2      	b.n	80035ce <__libc_init_array+0x1e>
 80035e8:	08003640 	.word	0x08003640
 80035ec:	08003640 	.word	0x08003640
 80035f0:	08003640 	.word	0x08003640
 80035f4:	08003644 	.word	0x08003644

080035f8 <memset>:
 80035f8:	4402      	add	r2, r0
 80035fa:	4603      	mov	r3, r0
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d100      	bne.n	8003602 <memset+0xa>
 8003600:	4770      	bx	lr
 8003602:	f803 1b01 	strb.w	r1, [r3], #1
 8003606:	e7f9      	b.n	80035fc <memset+0x4>

08003608 <_init>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	bf00      	nop
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr

08003614 <_fini>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr
